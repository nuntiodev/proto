// source: nuntio/users/v1alpha1/users_namespace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var nuntio_users_v1alpha1_users_messages_pb = require('../../../nuntio/users/v1alpha1/users_messages_pb.js');
goog.object.extend(proto, nuntio_users_v1alpha1_users_messages_pb);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServicePingRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServicePingResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest', null, global);
goog.exportSymbol('proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServicePingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServicePingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServicePingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServicePingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.repeatedFields_, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.repeatedFields_, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.repeatedFields_, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.displayName = 'proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePingRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServicePingRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePingRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePingResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServicePingResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePingResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    loginMechanismsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    emailProvider: (f = msg.getEmailProvider()) && nuntio_users_v1alpha1_users_messages_pb.EmailProvider.toObject(includeInstance, f),
    textProvider: (f = msg.getTextProvider()) && nuntio_users_v1alpha1_users_messages_pb.TextProvider.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.nuntio.users.v1alpha1.LoginType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLoginMechanisms(values[i]);
      }
      break;
    case 5:
      var value = new nuntio_users_v1alpha1_users_messages_pb.EmailProvider;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.EmailProvider.deserializeBinaryFromReader);
      msg.setEmailProvider(value);
      break;
    case 6:
      var value = new nuntio_users_v1alpha1_users_messages_pb.TextProvider;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.TextProvider.deserializeBinaryFromReader);
      msg.setTextProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLoginMechanismsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getEmailProvider();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      nuntio_users_v1alpha1_users_messages_pb.EmailProvider.serializeBinaryToWriter
    );
  }
  f = message.getTextProvider();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      nuntio_users_v1alpha1_users_messages_pb.TextProvider.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string logo = 3;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated LoginType login_mechanisms = 4;
 * @return {!Array<!proto.nuntio.users.v1alpha1.LoginType>}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getLoginMechanismsList = function() {
  return /** @type {!Array<!proto.nuntio.users.v1alpha1.LoginType>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.nuntio.users.v1alpha1.LoginType>} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setLoginMechanismsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.nuntio.users.v1alpha1.LoginType} value
 * @param {number=} opt_index
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.addLoginMechanisms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.clearLoginMechanismsList = function() {
  return this.setLoginMechanismsList([]);
};


/**
 * optional EmailProvider email_provider = 5;
 * @return {?proto.nuntio.users.v1alpha1.EmailProvider}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getEmailProvider = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.EmailProvider} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.EmailProvider, 5));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.EmailProvider|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setEmailProvider = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.clearEmailProvider = function() {
  return this.setEmailProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.hasEmailProvider = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TextProvider text_provider = 6;
 * @return {?proto.nuntio.users.v1alpha1.TextProvider}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.getTextProvider = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.TextProvider} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.TextProvider, 6));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.TextProvider|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.setTextProvider = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.clearTextProvider = function() {
  return this.setTextProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateRequest.prototype.hasTextProvider = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: (f = msg.getNamespace()) && nuntio_users_v1alpha1_users_messages_pb.Namespace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuntio_users_v1alpha1_users_messages_pb.Namespace;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.Namespace.deserializeBinaryFromReader);
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuntio_users_v1alpha1_users_messages_pb.Namespace.serializeBinaryToWriter
    );
  }
};


/**
 * optional Namespace namespace = 1;
 * @return {?proto.nuntio.users.v1alpha1.Namespace}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.getNamespace = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.Namespace} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.Namespace, 1));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.Namespace|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.setNamespace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.clearNamespace = function() {
  return this.setNamespace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceCreateResponse.prototype.hasNamespace = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.setImage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.clearImage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateRequest.prototype.hasImage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: (f = msg.getNamespace()) && nuntio_users_v1alpha1_users_messages_pb.Namespace.toObject(includeInstance, f),
    redirectAddr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuntio_users_v1alpha1_users_messages_pb.Namespace;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.Namespace.deserializeBinaryFromReader);
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuntio_users_v1alpha1_users_messages_pb.Namespace.serializeBinaryToWriter
    );
  }
  f = message.getRedirectAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Namespace namespace = 1;
 * @return {?proto.nuntio.users.v1alpha1.Namespace}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.getNamespace = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.Namespace} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.Namespace, 1));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.Namespace|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.setNamespace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.clearNamespace = function() {
  return this.setNamespace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.hasNamespace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string redirect_addr = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.getRedirectAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceGetResponse.prototype.setRedirectAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    privateKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    from: jspb.Message.getFieldWithDefault(msg, 4, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuntio.users.v1alpha1.EmailProviderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional EmailProviderType type = 1;
 * @return {!proto.nuntio.users.v1alpha1.EmailProviderType}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.getType = function() {
  return /** @type {!proto.nuntio.users.v1alpha1.EmailProviderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuntio.users.v1alpha1.EmailProviderType} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string private_key = 3;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from = 4;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string namespace = 5;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    privateKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    from: jspb.Message.getFieldWithDefault(msg, 4, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuntio.users.v1alpha1.TextProviderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional TextProviderType type = 1;
 * @return {!proto.nuntio.users.v1alpha1.TextProviderType}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.getType = function() {
  return /** @type {!proto.nuntio.users.v1alpha1.TextProviderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuntio.users.v1alpha1.TextProviderType} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string private_key = 3;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from = 4;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string namespace = 5;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    privateKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 4, 0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 4:
      var value = /** @type {!proto.nuntio.users.v1alpha1.OAuthProviderType} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string private_key = 3;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional OAuthProviderType provider = 4;
 * @return {!proto.nuntio.users.v1alpha1.OAuthProviderType}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.getProvider = function() {
  return /** @type {!proto.nuntio.users.v1alpha1.OAuthProviderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.nuntio.users.v1alpha1.OAuthProviderType} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool enabled = 5;
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callbacksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCallbacks(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallbacksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string callbacks = 1;
 * @return {!Array<string>}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.getCallbacksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.setCallbacksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.addCallbacks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.clearCallbacksList = function() {
  return this.setCallbacksList([]);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bcrypt: (f = msg.getBcrypt()) && nuntio_users_v1alpha1_users_messages_pb.Bcrypt.toObject(includeInstance, f),
    scrypt: (f = msg.getScrypt()) && nuntio_users_v1alpha1_users_messages_pb.Scrypt.toObject(includeInstance, f),
    namespace: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuntio.users.v1alpha1.HashingAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = new nuntio_users_v1alpha1_users_messages_pb.Bcrypt;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.Bcrypt.deserializeBinaryFromReader);
      msg.setBcrypt(value);
      break;
    case 3:
      var value = new nuntio_users_v1alpha1_users_messages_pb.Scrypt;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.Scrypt.deserializeBinaryFromReader);
      msg.setScrypt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBcrypt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nuntio_users_v1alpha1_users_messages_pb.Bcrypt.serializeBinaryToWriter
    );
  }
  f = message.getScrypt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuntio_users_v1alpha1_users_messages_pb.Scrypt.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional HashingAlgorithm algorithm = 1;
 * @return {!proto.nuntio.users.v1alpha1.HashingAlgorithm}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.getAlgorithm = function() {
  return /** @type {!proto.nuntio.users.v1alpha1.HashingAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuntio.users.v1alpha1.HashingAlgorithm} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Bcrypt bcrypt = 2;
 * @return {?proto.nuntio.users.v1alpha1.Bcrypt}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.getBcrypt = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.Bcrypt} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.Bcrypt, 2));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.Bcrypt|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.setBcrypt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.clearBcrypt = function() {
  return this.setBcrypt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.hasBcrypt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Scrypt scrypt = 3;
 * @return {?proto.nuntio.users.v1alpha1.Scrypt}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.getScrypt = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.Scrypt} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.Scrypt, 3));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.Scrypt|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.setScrypt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.clearScrypt = function() {
  return this.setScrypt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.hasScrypt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string namespace = 4;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginMechanismsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    validatePassword: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    verifyEmail: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    verifyPhoneNumber: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.nuntio.users.v1alpha1.LoginType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLoginMechanisms(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidatePassword(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerifyEmail(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerifyPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginMechanismsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * repeated LoginType login_mechanisms = 1;
 * @return {!Array<!proto.nuntio.users.v1alpha1.LoginType>}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.getLoginMechanismsList = function() {
  return /** @type {!Array<!proto.nuntio.users.v1alpha1.LoginType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.nuntio.users.v1alpha1.LoginType>} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.setLoginMechanismsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.nuntio.users.v1alpha1.LoginType} value
 * @param {number=} opt_index
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.addLoginMechanisms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.clearLoginMechanismsList = function() {
  return this.setLoginMechanismsList([]);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool validate_password = 5;
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.getValidatePassword = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.setValidatePassword = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.clearValidatePassword = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.hasValidatePassword = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool verify_email = 6;
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.getVerifyEmail = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.setVerifyEmail = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.clearVerifyEmail = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.hasVerifyEmail = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool verify_phone_number = 7;
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.getVerifyPhoneNumber = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.setVerifyPhoneNumber = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.clearVerifyPhoneNumber = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.prototype.hasVerifyPhoneNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessTokenTtl: jspb.Message.getFieldWithDefault(msg, 1, 0),
    refreshTokenTtl: jspb.Message.getFieldWithDefault(msg, 2, 0),
    verificationCodeTtl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    namespace: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccessTokenTtl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefreshTokenTtl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVerificationCodeTtl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 access_token_ttl = 1;
 * @return {number}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.getAccessTokenTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.setAccessTokenTtl = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.clearAccessTokenTtl = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.hasAccessTokenTtl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 refresh_token_ttl = 2;
 * @return {number}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.getRefreshTokenTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.setRefreshTokenTtl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.clearRefreshTokenTtl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.hasRefreshTokenTtl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 verification_code_ttl = 3;
 * @return {number}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.getVerificationCodeTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.setVerificationCodeTtl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.clearVerificationCodeTtl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.hasVerificationCodeTtl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string namespace = 4;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    template: (f = msg.getTemplate()) && nuntio_users_v1alpha1_users_messages_pb.Template.toObject(includeInstance, f),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nuntio_users_v1alpha1_users_messages_pb.Template;
      reader.readMessage(value,nuntio_users_v1alpha1_users_messages_pb.Template.deserializeBinaryFromReader);
      msg.setTemplate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nuntio_users_v1alpha1_users_messages_pb.Template.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Template template = 1;
 * @return {?proto.nuntio.users.v1alpha1.Template}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.getTemplate = function() {
  return /** @type{?proto.nuntio.users.v1alpha1.Template} */ (
    jspb.Message.getWrapperField(this, nuntio_users_v1alpha1_users_messages_pb.Template, 1));
};


/**
 * @param {?proto.nuntio.users.v1alpha1.Template|undefined} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} returns this
*/
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.setTemplate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.clearTemplate = function() {
  return this.setTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.hasTemplate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest} returns this
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse;
  return proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.nuntio.users.v1alpha1);
