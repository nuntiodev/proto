// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_member.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	// Ping checks if a service is live
	Ping(ctx context.Context, in *MemberServicePingRequest, opts ...grpc.CallOption) (*MemberServicePingResponse, error)
	// AddMember adds a member to a namespace
	Add(ctx context.Context, in *MemberServiceAddRequest, opts ...grpc.CallOption) (*MemberServiceAddResponse, error)
	// RemoveMember removes a member from a namespace
	Remove(ctx context.Context, in *MemberServiceRemoveRequest, opts ...grpc.CallOption) (*MemberServiceRemoveResponse, error)
	// AddProject adds a project to a members list of projects
	AddProject(ctx context.Context, in *MemberServiceAddProjectRequest, opts ...grpc.CallOption) (*MemberServiceAddProjectResponse, error)
	// ListMembers returns a list of claimed and unclaimed members
	ListMembers(ctx context.Context, in *MemberServiceListMembersRequest, opts ...grpc.CallOption) (*MemberServiceListMembersResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Ping(ctx context.Context, in *MemberServicePingRequest, opts ...grpc.CallOption) (*MemberServicePingResponse, error) {
	out := new(MemberServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MemberService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Add(ctx context.Context, in *MemberServiceAddRequest, opts ...grpc.CallOption) (*MemberServiceAddResponse, error) {
	out := new(MemberServiceAddResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MemberService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Remove(ctx context.Context, in *MemberServiceRemoveRequest, opts ...grpc.CallOption) (*MemberServiceRemoveResponse, error) {
	out := new(MemberServiceRemoveResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MemberService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AddProject(ctx context.Context, in *MemberServiceAddProjectRequest, opts ...grpc.CallOption) (*MemberServiceAddProjectResponse, error) {
	out := new(MemberServiceAddProjectResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MemberService/AddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMembers(ctx context.Context, in *MemberServiceListMembersRequest, opts ...grpc.CallOption) (*MemberServiceListMembersResponse, error) {
	out := new(MemberServiceListMembersResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MemberService/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations should embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	// Ping checks if a service is live
	Ping(context.Context, *MemberServicePingRequest) (*MemberServicePingResponse, error)
	// AddMember adds a member to a namespace
	Add(context.Context, *MemberServiceAddRequest) (*MemberServiceAddResponse, error)
	// RemoveMember removes a member from a namespace
	Remove(context.Context, *MemberServiceRemoveRequest) (*MemberServiceRemoveResponse, error)
	// AddProject adds a project to a members list of projects
	AddProject(context.Context, *MemberServiceAddProjectRequest) (*MemberServiceAddProjectResponse, error)
	// ListMembers returns a list of claimed and unclaimed members
	ListMembers(context.Context, *MemberServiceListMembersRequest) (*MemberServiceListMembersResponse, error)
}

// UnimplementedMemberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) Ping(context.Context, *MemberServicePingRequest) (*MemberServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMemberServiceServer) Add(context.Context, *MemberServiceAddRequest) (*MemberServiceAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMemberServiceServer) Remove(context.Context, *MemberServiceRemoveRequest) (*MemberServiceRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedMemberServiceServer) AddProject(context.Context, *MemberServiceAddProjectRequest) (*MemberServiceAddProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedMemberServiceServer) ListMembers(context.Context, *MemberServiceListMembersRequest) (*MemberServiceListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MemberService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Ping(ctx, req.(*MemberServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberServiceAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MemberService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Add(ctx, req.(*MemberServiceAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberServiceRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MemberService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Remove(ctx, req.(*MemberServiceRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberServiceAddProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MemberService/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddProject(ctx, req.(*MemberServiceAddProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberServiceListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MemberService/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ListMembers(ctx, req.(*MemberServiceListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MemberService_Ping_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MemberService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MemberService_Remove_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _MemberService_AddProject_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _MemberService_ListMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_member.proto",
}
