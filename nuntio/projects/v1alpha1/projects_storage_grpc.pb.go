// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_storage.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminStorageServiceClient is the client API for AdminStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminStorageServiceClient interface {
	// Ping returns an empty response used to check if the server is live
	Ping(ctx context.Context, in *AdminStorageServicePingRequest, opts ...grpc.CallOption) (*AdminStorageServicePingResponse, error)
	// CreateNamespace initializes the storage interface for a given namespace
	CreateNamespace(ctx context.Context, in *AdminStorageServiceCreateNamespaceRequest, opts ...grpc.CallOption) (*AdminStorageServiceCreateNamespaceResponse, error)
	// DeleteNamespace removes the storage ressources for a given namespace
	DeleteNamespace(ctx context.Context, in *AdminStorageServiceDeleteNamespaceRequest, opts ...grpc.CallOption) (*AdminStorageServiceDeleteNamespaceResponse, error)
	// IsConfigured check if the storage interface is configured
	IsConfigured(ctx context.Context, in *AdminStorageServiceIsConfiguredRequest, opts ...grpc.CallOption) (*AdminStorageServiceIsConfiguredResponse, error)
}

type adminStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminStorageServiceClient(cc grpc.ClientConnInterface) AdminStorageServiceClient {
	return &adminStorageServiceClient{cc}
}

func (c *adminStorageServiceClient) Ping(ctx context.Context, in *AdminStorageServicePingRequest, opts ...grpc.CallOption) (*AdminStorageServicePingResponse, error) {
	out := new(AdminStorageServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.AdminStorageService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStorageServiceClient) CreateNamespace(ctx context.Context, in *AdminStorageServiceCreateNamespaceRequest, opts ...grpc.CallOption) (*AdminStorageServiceCreateNamespaceResponse, error) {
	out := new(AdminStorageServiceCreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.AdminStorageService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStorageServiceClient) DeleteNamespace(ctx context.Context, in *AdminStorageServiceDeleteNamespaceRequest, opts ...grpc.CallOption) (*AdminStorageServiceDeleteNamespaceResponse, error) {
	out := new(AdminStorageServiceDeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.AdminStorageService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStorageServiceClient) IsConfigured(ctx context.Context, in *AdminStorageServiceIsConfiguredRequest, opts ...grpc.CallOption) (*AdminStorageServiceIsConfiguredResponse, error) {
	out := new(AdminStorageServiceIsConfiguredResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.AdminStorageService/IsConfigured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminStorageServiceServer is the server API for AdminStorageService service.
// All implementations should embed UnimplementedAdminStorageServiceServer
// for forward compatibility
type AdminStorageServiceServer interface {
	// Ping returns an empty response used to check if the server is live
	Ping(context.Context, *AdminStorageServicePingRequest) (*AdminStorageServicePingResponse, error)
	// CreateNamespace initializes the storage interface for a given namespace
	CreateNamespace(context.Context, *AdminStorageServiceCreateNamespaceRequest) (*AdminStorageServiceCreateNamespaceResponse, error)
	// DeleteNamespace removes the storage ressources for a given namespace
	DeleteNamespace(context.Context, *AdminStorageServiceDeleteNamespaceRequest) (*AdminStorageServiceDeleteNamespaceResponse, error)
	// IsConfigured check if the storage interface is configured
	IsConfigured(context.Context, *AdminStorageServiceIsConfiguredRequest) (*AdminStorageServiceIsConfiguredResponse, error)
}

// UnimplementedAdminStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminStorageServiceServer struct {
}

func (UnimplementedAdminStorageServiceServer) Ping(context.Context, *AdminStorageServicePingRequest) (*AdminStorageServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminStorageServiceServer) CreateNamespace(context.Context, *AdminStorageServiceCreateNamespaceRequest) (*AdminStorageServiceCreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedAdminStorageServiceServer) DeleteNamespace(context.Context, *AdminStorageServiceDeleteNamespaceRequest) (*AdminStorageServiceDeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedAdminStorageServiceServer) IsConfigured(context.Context, *AdminStorageServiceIsConfiguredRequest) (*AdminStorageServiceIsConfiguredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConfigured not implemented")
}

// UnsafeAdminStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminStorageServiceServer will
// result in compilation errors.
type UnsafeAdminStorageServiceServer interface {
	mustEmbedUnimplementedAdminStorageServiceServer()
}

func RegisterAdminStorageServiceServer(s grpc.ServiceRegistrar, srv AdminStorageServiceServer) {
	s.RegisterService(&AdminStorageService_ServiceDesc, srv)
}

func _AdminStorageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStorageServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStorageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.AdminStorageService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStorageServiceServer).Ping(ctx, req.(*AdminStorageServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStorageService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStorageServiceCreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStorageServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.AdminStorageService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStorageServiceServer).CreateNamespace(ctx, req.(*AdminStorageServiceCreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStorageService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStorageServiceDeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStorageServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.AdminStorageService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStorageServiceServer).DeleteNamespace(ctx, req.(*AdminStorageServiceDeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStorageService_IsConfigured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStorageServiceIsConfiguredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStorageServiceServer).IsConfigured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.AdminStorageService/IsConfigured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStorageServiceServer).IsConfigured(ctx, req.(*AdminStorageServiceIsConfiguredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminStorageService_ServiceDesc is the grpc.ServiceDesc for AdminStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.AdminStorageService",
	HandlerType: (*AdminStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AdminStorageService_Ping_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _AdminStorageService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _AdminStorageService_DeleteNamespace_Handler,
		},
		{
			MethodName: "IsConfigured",
			Handler:    _AdminStorageService_IsConfigured_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_storage.proto",
}

// PublicStorageServiceClient is the client API for PublicStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicStorageServiceClient interface {
	// Ping returns an empty response used to check if the server is live
	Ping(ctx context.Context, in *PublicStorageServicePingRequest, opts ...grpc.CallOption) (*PublicStorageServicePingResponse, error)
	// Delete deletes requested file
	Delete(ctx context.Context, in *PublicStorageServiceDeleteRequest, opts ...grpc.CallOption) (*PublicStorageServiceDeleteResponse, error)
	// GenerateLink geneates a link to a specific file
	GenerateLink(ctx context.Context, in *GenerateLinkRequest, opts ...grpc.CallOption) (*GenerateLinkResponse, error)
	// Upload uploads a file to the server
	Upload(ctx context.Context, opts ...grpc.CallOption) (PublicStorageService_UploadClient, error)
	// List returns a list of all folders and files in a path
	List(ctx context.Context, in *PublicStorageServiceListRequest, opts ...grpc.CallOption) (*PublicStorageServiceListResponse, error)
	// DownloadFile returns the butes of a file
	DownloadFile(ctx context.Context, in *PublicStorageServiceDownloadFileRequest, opts ...grpc.CallOption) (*PublicStorageServiceDownloadFileResponse, error)
}

type publicStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicStorageServiceClient(cc grpc.ClientConnInterface) PublicStorageServiceClient {
	return &publicStorageServiceClient{cc}
}

func (c *publicStorageServiceClient) Ping(ctx context.Context, in *PublicStorageServicePingRequest, opts ...grpc.CallOption) (*PublicStorageServicePingResponse, error) {
	out := new(PublicStorageServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.PublicStorageService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicStorageServiceClient) Delete(ctx context.Context, in *PublicStorageServiceDeleteRequest, opts ...grpc.CallOption) (*PublicStorageServiceDeleteResponse, error) {
	out := new(PublicStorageServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.PublicStorageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicStorageServiceClient) GenerateLink(ctx context.Context, in *GenerateLinkRequest, opts ...grpc.CallOption) (*GenerateLinkResponse, error) {
	out := new(GenerateLinkResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.PublicStorageService/GenerateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicStorageServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (PublicStorageService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicStorageService_ServiceDesc.Streams[0], "/nuntio.projects.v1alpha1.PublicStorageService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicStorageServiceUploadClient{stream}
	return x, nil
}

type PublicStorageService_UploadClient interface {
	Send(*PublicStorageServiceUploadRequest) error
	CloseAndRecv() (*PublicStorageServiceUploadResponse, error)
	grpc.ClientStream
}

type publicStorageServiceUploadClient struct {
	grpc.ClientStream
}

func (x *publicStorageServiceUploadClient) Send(m *PublicStorageServiceUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicStorageServiceUploadClient) CloseAndRecv() (*PublicStorageServiceUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublicStorageServiceUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicStorageServiceClient) List(ctx context.Context, in *PublicStorageServiceListRequest, opts ...grpc.CallOption) (*PublicStorageServiceListResponse, error) {
	out := new(PublicStorageServiceListResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.PublicStorageService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicStorageServiceClient) DownloadFile(ctx context.Context, in *PublicStorageServiceDownloadFileRequest, opts ...grpc.CallOption) (*PublicStorageServiceDownloadFileResponse, error) {
	out := new(PublicStorageServiceDownloadFileResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.PublicStorageService/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicStorageServiceServer is the server API for PublicStorageService service.
// All implementations should embed UnimplementedPublicStorageServiceServer
// for forward compatibility
type PublicStorageServiceServer interface {
	// Ping returns an empty response used to check if the server is live
	Ping(context.Context, *PublicStorageServicePingRequest) (*PublicStorageServicePingResponse, error)
	// Delete deletes requested file
	Delete(context.Context, *PublicStorageServiceDeleteRequest) (*PublicStorageServiceDeleteResponse, error)
	// GenerateLink geneates a link to a specific file
	GenerateLink(context.Context, *GenerateLinkRequest) (*GenerateLinkResponse, error)
	// Upload uploads a file to the server
	Upload(PublicStorageService_UploadServer) error
	// List returns a list of all folders and files in a path
	List(context.Context, *PublicStorageServiceListRequest) (*PublicStorageServiceListResponse, error)
	// DownloadFile returns the butes of a file
	DownloadFile(context.Context, *PublicStorageServiceDownloadFileRequest) (*PublicStorageServiceDownloadFileResponse, error)
}

// UnimplementedPublicStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicStorageServiceServer struct {
}

func (UnimplementedPublicStorageServiceServer) Ping(context.Context, *PublicStorageServicePingRequest) (*PublicStorageServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPublicStorageServiceServer) Delete(context.Context, *PublicStorageServiceDeleteRequest) (*PublicStorageServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicStorageServiceServer) GenerateLink(context.Context, *GenerateLinkRequest) (*GenerateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLink not implemented")
}
func (UnimplementedPublicStorageServiceServer) Upload(PublicStorageService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedPublicStorageServiceServer) List(context.Context, *PublicStorageServiceListRequest) (*PublicStorageServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPublicStorageServiceServer) DownloadFile(context.Context, *PublicStorageServiceDownloadFileRequest) (*PublicStorageServiceDownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

// UnsafePublicStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicStorageServiceServer will
// result in compilation errors.
type UnsafePublicStorageServiceServer interface {
	mustEmbedUnimplementedPublicStorageServiceServer()
}

func RegisterPublicStorageServiceServer(s grpc.ServiceRegistrar, srv PublicStorageServiceServer) {
	s.RegisterService(&PublicStorageService_ServiceDesc, srv)
}

func _PublicStorageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicStorageServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.PublicStorageService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServiceServer).Ping(ctx, req.(*PublicStorageServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicStorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicStorageServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.PublicStorageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServiceServer).Delete(ctx, req.(*PublicStorageServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicStorageService_GenerateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServiceServer).GenerateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.PublicStorageService/GenerateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServiceServer).GenerateLink(ctx, req.(*GenerateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicStorageService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicStorageServiceServer).Upload(&publicStorageServiceUploadServer{stream})
}

type PublicStorageService_UploadServer interface {
	SendAndClose(*PublicStorageServiceUploadResponse) error
	Recv() (*PublicStorageServiceUploadRequest, error)
	grpc.ServerStream
}

type publicStorageServiceUploadServer struct {
	grpc.ServerStream
}

func (x *publicStorageServiceUploadServer) SendAndClose(m *PublicStorageServiceUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicStorageServiceUploadServer) Recv() (*PublicStorageServiceUploadRequest, error) {
	m := new(PublicStorageServiceUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicStorageService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicStorageServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.PublicStorageService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServiceServer).List(ctx, req.(*PublicStorageServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicStorageService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicStorageServiceDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.PublicStorageService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServiceServer).DownloadFile(ctx, req.(*PublicStorageServiceDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicStorageService_ServiceDesc is the grpc.ServiceDesc for PublicStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.PublicStorageService",
	HandlerType: (*PublicStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PublicStorageService_Ping_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PublicStorageService_Delete_Handler,
		},
		{
			MethodName: "GenerateLink",
			Handler:    _PublicStorageService_GenerateLink_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PublicStorageService_List_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _PublicStorageService_DownloadFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _PublicStorageService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nuntio/projects/v1alpha1/projects_storage.proto",
}
