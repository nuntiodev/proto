// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: nuntio/projects/v1alpha1/projects_database.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request of a API.Ping RPC
type MongoServicePingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServicePingRequest) Reset() {
	*x = MongoServicePingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServicePingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServicePingRequest) ProtoMessage() {}

func (x *MongoServicePingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServicePingRequest.ProtoReflect.Descriptor instead.
func (*MongoServicePingRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{0}
}

// The response of a API.Ping RPC
type MongoServicePingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServicePingResponse) Reset() {
	*x = MongoServicePingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServicePingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServicePingResponse) ProtoMessage() {}

func (x *MongoServicePingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServicePingResponse.ProtoReflect.Descriptor instead.
func (*MongoServicePingResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{1}
}

// The request of a Mongo.CreateNamespace RPC
type MongoServiceCreateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the project id related to the api key
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MongoServiceCreateNamespaceRequest) Reset() {
	*x = MongoServiceCreateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceCreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceCreateNamespaceRequest) ProtoMessage() {}

func (x *MongoServiceCreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceCreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*MongoServiceCreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{2}
}

func (x *MongoServiceCreateNamespaceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// The response of a Mongo.CreateNamespace RPC
type MongoServiceCreateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServiceCreateNamespaceResponse) Reset() {
	*x = MongoServiceCreateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceCreateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceCreateNamespaceResponse) ProtoMessage() {}

func (x *MongoServiceCreateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceCreateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*MongoServiceCreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{3}
}

// The request of a Mongo.DeleteNamespace RPC
type MongoServiceDeleteNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the project id related to the api key
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MongoServiceDeleteNamespaceRequest) Reset() {
	*x = MongoServiceDeleteNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceDeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceDeleteNamespaceRequest) ProtoMessage() {}

func (x *MongoServiceDeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceDeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*MongoServiceDeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{4}
}

func (x *MongoServiceDeleteNamespaceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// The response of a Mongo.DeleteNamespace RPC
type MongoServiceDeleteNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServiceDeleteNamespaceResponse) Reset() {
	*x = MongoServiceDeleteNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceDeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceDeleteNamespaceResponse) ProtoMessage() {}

func (x *MongoServiceDeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceDeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*MongoServiceDeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{5}
}

// The request of a Mongo.IsConfigured RPC
type MongoServiceIsConfiguredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the project id related to the api key
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MongoServiceIsConfiguredRequest) Reset() {
	*x = MongoServiceIsConfiguredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceIsConfiguredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceIsConfiguredRequest) ProtoMessage() {}

func (x *MongoServiceIsConfiguredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceIsConfiguredRequest.ProtoReflect.Descriptor instead.
func (*MongoServiceIsConfiguredRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{6}
}

func (x *MongoServiceIsConfiguredRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// The response of a Mongo.IsConfigured RPC
type MongoServiceIsConfiguredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data in the file
	Configured bool `protobuf:"varint,1,opt,name=configured,proto3" json:"configured,omitempty"`
}

func (x *MongoServiceIsConfiguredResponse) Reset() {
	*x = MongoServiceIsConfiguredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceIsConfiguredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceIsConfiguredResponse) ProtoMessage() {}

func (x *MongoServiceIsConfiguredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceIsConfiguredResponse.ProtoReflect.Descriptor instead.
func (*MongoServiceIsConfiguredResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{7}
}

func (x *MongoServiceIsConfiguredResponse) GetConfigured() bool {
	if x != nil {
		return x.Configured
	}
	return false
}

// The request of a Mongo.AddUser RPC
type MongoServiceAddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the project id related to the api key
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The id of the user (api key)
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The password of the user (api key)
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *MongoServiceAddUserRequest) Reset() {
	*x = MongoServiceAddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceAddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceAddUserRequest) ProtoMessage() {}

func (x *MongoServiceAddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceAddUserRequest.ProtoReflect.Descriptor instead.
func (*MongoServiceAddUserRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{8}
}

func (x *MongoServiceAddUserRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MongoServiceAddUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MongoServiceAddUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// The response of a Mongo.AddUser RPC
type MongoServiceAddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServiceAddUserResponse) Reset() {
	*x = MongoServiceAddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceAddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceAddUserResponse) ProtoMessage() {}

func (x *MongoServiceAddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceAddUserResponse.ProtoReflect.Descriptor instead.
func (*MongoServiceAddUserResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{9}
}

// The request of a Mongo.RemoveUser RPC
type MongoServiceRemoveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the user (api key)
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the project id related to the api key
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MongoServiceRemoveUserRequest) Reset() {
	*x = MongoServiceRemoveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceRemoveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceRemoveUserRequest) ProtoMessage() {}

func (x *MongoServiceRemoveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceRemoveUserRequest.ProtoReflect.Descriptor instead.
func (*MongoServiceRemoveUserRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{10}
}

func (x *MongoServiceRemoveUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MongoServiceRemoveUserRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// The response of a Mongo.RemoveUser RPC
type MongoServiceRemoveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoServiceRemoveUserResponse) Reset() {
	*x = MongoServiceRemoveUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoServiceRemoveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoServiceRemoveUserResponse) ProtoMessage() {}

func (x *MongoServiceRemoveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoServiceRemoveUserResponse.ProtoReflect.Descriptor instead.
func (*MongoServiceRemoveUserResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP(), []int{11}
}

var File_nuntio_projects_v1alpha1_projects_database_proto protoreflect.FileDescriptor

var file_nuntio_projects_v1alpha1_projects_database_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x19, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x67, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x22, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0x0a, 0x22, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x1f, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a,
	0x20, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x22, 0x70, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xad, 0x06,
	0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x3c, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x39, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x78, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6e, 0x75, 0x6e,
	0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x6e, 0x0a,
	0x18, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x1a, 0x2e, 0x2f, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xaa, 0x02, 0x18, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xca, 0x02, 0x18, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x5c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5c, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nuntio_projects_v1alpha1_projects_database_proto_rawDescOnce sync.Once
	file_nuntio_projects_v1alpha1_projects_database_proto_rawDescData = file_nuntio_projects_v1alpha1_projects_database_proto_rawDesc
)

func file_nuntio_projects_v1alpha1_projects_database_proto_rawDescGZIP() []byte {
	file_nuntio_projects_v1alpha1_projects_database_proto_rawDescOnce.Do(func() {
		file_nuntio_projects_v1alpha1_projects_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_nuntio_projects_v1alpha1_projects_database_proto_rawDescData)
	})
	return file_nuntio_projects_v1alpha1_projects_database_proto_rawDescData
}

var file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_nuntio_projects_v1alpha1_projects_database_proto_goTypes = []interface{}{
	(*MongoServicePingRequest)(nil),             // 0: nuntio.projects.v1alpha1.MongoServicePingRequest
	(*MongoServicePingResponse)(nil),            // 1: nuntio.projects.v1alpha1.MongoServicePingResponse
	(*MongoServiceCreateNamespaceRequest)(nil),  // 2: nuntio.projects.v1alpha1.MongoServiceCreateNamespaceRequest
	(*MongoServiceCreateNamespaceResponse)(nil), // 3: nuntio.projects.v1alpha1.MongoServiceCreateNamespaceResponse
	(*MongoServiceDeleteNamespaceRequest)(nil),  // 4: nuntio.projects.v1alpha1.MongoServiceDeleteNamespaceRequest
	(*MongoServiceDeleteNamespaceResponse)(nil), // 5: nuntio.projects.v1alpha1.MongoServiceDeleteNamespaceResponse
	(*MongoServiceIsConfiguredRequest)(nil),     // 6: nuntio.projects.v1alpha1.MongoServiceIsConfiguredRequest
	(*MongoServiceIsConfiguredResponse)(nil),    // 7: nuntio.projects.v1alpha1.MongoServiceIsConfiguredResponse
	(*MongoServiceAddUserRequest)(nil),          // 8: nuntio.projects.v1alpha1.MongoServiceAddUserRequest
	(*MongoServiceAddUserResponse)(nil),         // 9: nuntio.projects.v1alpha1.MongoServiceAddUserResponse
	(*MongoServiceRemoveUserRequest)(nil),       // 10: nuntio.projects.v1alpha1.MongoServiceRemoveUserRequest
	(*MongoServiceRemoveUserResponse)(nil),      // 11: nuntio.projects.v1alpha1.MongoServiceRemoveUserResponse
}
var file_nuntio_projects_v1alpha1_projects_database_proto_depIdxs = []int32{
	0,  // 0: nuntio.projects.v1alpha1.MongoService.Ping:input_type -> nuntio.projects.v1alpha1.MongoServicePingRequest
	2,  // 1: nuntio.projects.v1alpha1.MongoService.CreateNamespace:input_type -> nuntio.projects.v1alpha1.MongoServiceCreateNamespaceRequest
	4,  // 2: nuntio.projects.v1alpha1.MongoService.DeleteNamespace:input_type -> nuntio.projects.v1alpha1.MongoServiceDeleteNamespaceRequest
	6,  // 3: nuntio.projects.v1alpha1.MongoService.IsConfigured:input_type -> nuntio.projects.v1alpha1.MongoServiceIsConfiguredRequest
	8,  // 4: nuntio.projects.v1alpha1.MongoService.AddUser:input_type -> nuntio.projects.v1alpha1.MongoServiceAddUserRequest
	10, // 5: nuntio.projects.v1alpha1.MongoService.RemoveUser:input_type -> nuntio.projects.v1alpha1.MongoServiceRemoveUserRequest
	1,  // 6: nuntio.projects.v1alpha1.MongoService.Ping:output_type -> nuntio.projects.v1alpha1.MongoServicePingResponse
	3,  // 7: nuntio.projects.v1alpha1.MongoService.CreateNamespace:output_type -> nuntio.projects.v1alpha1.MongoServiceCreateNamespaceResponse
	5,  // 8: nuntio.projects.v1alpha1.MongoService.DeleteNamespace:output_type -> nuntio.projects.v1alpha1.MongoServiceDeleteNamespaceResponse
	7,  // 9: nuntio.projects.v1alpha1.MongoService.IsConfigured:output_type -> nuntio.projects.v1alpha1.MongoServiceIsConfiguredResponse
	9,  // 10: nuntio.projects.v1alpha1.MongoService.AddUser:output_type -> nuntio.projects.v1alpha1.MongoServiceAddUserResponse
	11, // 11: nuntio.projects.v1alpha1.MongoService.RemoveUser:output_type -> nuntio.projects.v1alpha1.MongoServiceRemoveUserResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_nuntio_projects_v1alpha1_projects_database_proto_init() }
func file_nuntio_projects_v1alpha1_projects_database_proto_init() {
	if File_nuntio_projects_v1alpha1_projects_database_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServicePingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServicePingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceCreateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceCreateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceDeleteNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceDeleteNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceIsConfiguredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceIsConfiguredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceAddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceAddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceRemoveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoServiceRemoveUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nuntio_projects_v1alpha1_projects_database_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nuntio_projects_v1alpha1_projects_database_proto_goTypes,
		DependencyIndexes: file_nuntio_projects_v1alpha1_projects_database_proto_depIdxs,
		MessageInfos:      file_nuntio_projects_v1alpha1_projects_database_proto_msgTypes,
	}.Build()
	File_nuntio_projects_v1alpha1_projects_database_proto = out.File
	file_nuntio_projects_v1alpha1_projects_database_proto_rawDesc = nil
	file_nuntio_projects_v1alpha1_projects_database_proto_goTypes = nil
	file_nuntio_projects_v1alpha1_projects_database_proto_depIdxs = nil
}
