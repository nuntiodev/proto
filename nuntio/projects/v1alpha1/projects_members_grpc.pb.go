// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_members.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MembersServiceClient is the client API for MembersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersServiceClient interface {
	// Ping checks if a service is live
	Ping(ctx context.Context, in *MembersServicePingRequest, opts ...grpc.CallOption) (*MembersServicePingResponse, error)
	// Add adds a member to a project
	Add(ctx context.Context, in *MembersServiceAddRequest, opts ...grpc.CallOption) (*MembersServiceAddResponse, error)
	// RemoveMember removes a member from a namespace
	Remove(ctx context.Context, in *MembersServiceRemoveRequest, opts ...grpc.CallOption) (*MembersServiceRemoveResponse, error)
	// Regsiter creates a new member
	Register(ctx context.Context, in *MembersServiceRegisterRequest, opts ...grpc.CallOption) (*MembersServiceRegisterResponse, error)
	// Authenticates a member
	Login(ctx context.Context, in *MembersServiceLoginRequest, opts ...grpc.CallOption) (*MembersServiceLoginResponse, error)
	// updates the users password
	UpdatePassword(ctx context.Context, in *MembersServiceUpdatePasswordRequest, opts ...grpc.CallOption) (*MembersServiceUpdatePasswordResponse, error)
	// updates the members profile
	UpdateProfile(ctx context.Context, in *MembersServiceUpdateProfileRequest, opts ...grpc.CallOption) (*MembersServiceUpdateProfileResponse, error)
	// ListMembers returns a list of claimed and unclaimed members
	List(ctx context.Context, in *MembersServiceListRequest, opts ...grpc.CallOption) (*MembersServiceListResponse, error)
	// Get returns a specific member
	Get(ctx context.Context, in *MembersServiceGetRequest, opts ...grpc.CallOption) (*MembersServiceGetResponse, error)
	// RefreshToken refreshes a token and returns a new access/refresh token pair
	RefreshToken(ctx context.Context, in *MembersServiceRefreshTokenRequest, opts ...grpc.CallOption) (*MembersServiceRefreshTokenResponse, error)
	// UpdateMemberType updates the member type
	UpdateMemberType(ctx context.Context, in *MembersServiceUpdateMemberTypeRequest, opts ...grpc.CallOption) (*MembersServiceUpdateMemberTypeResponse, error)
}

type membersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersServiceClient(cc grpc.ClientConnInterface) MembersServiceClient {
	return &membersServiceClient{cc}
}

func (c *membersServiceClient) Ping(ctx context.Context, in *MembersServicePingRequest, opts ...grpc.CallOption) (*MembersServicePingResponse, error) {
	out := new(MembersServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Add(ctx context.Context, in *MembersServiceAddRequest, opts ...grpc.CallOption) (*MembersServiceAddResponse, error) {
	out := new(MembersServiceAddResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Remove(ctx context.Context, in *MembersServiceRemoveRequest, opts ...grpc.CallOption) (*MembersServiceRemoveResponse, error) {
	out := new(MembersServiceRemoveResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Register(ctx context.Context, in *MembersServiceRegisterRequest, opts ...grpc.CallOption) (*MembersServiceRegisterResponse, error) {
	out := new(MembersServiceRegisterResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Login(ctx context.Context, in *MembersServiceLoginRequest, opts ...grpc.CallOption) (*MembersServiceLoginResponse, error) {
	out := new(MembersServiceLoginResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) UpdatePassword(ctx context.Context, in *MembersServiceUpdatePasswordRequest, opts ...grpc.CallOption) (*MembersServiceUpdatePasswordResponse, error) {
	out := new(MembersServiceUpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) UpdateProfile(ctx context.Context, in *MembersServiceUpdateProfileRequest, opts ...grpc.CallOption) (*MembersServiceUpdateProfileResponse, error) {
	out := new(MembersServiceUpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) List(ctx context.Context, in *MembersServiceListRequest, opts ...grpc.CallOption) (*MembersServiceListResponse, error) {
	out := new(MembersServiceListResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Get(ctx context.Context, in *MembersServiceGetRequest, opts ...grpc.CallOption) (*MembersServiceGetResponse, error) {
	out := new(MembersServiceGetResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) RefreshToken(ctx context.Context, in *MembersServiceRefreshTokenRequest, opts ...grpc.CallOption) (*MembersServiceRefreshTokenResponse, error) {
	out := new(MembersServiceRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) UpdateMemberType(ctx context.Context, in *MembersServiceUpdateMemberTypeRequest, opts ...grpc.CallOption) (*MembersServiceUpdateMemberTypeResponse, error) {
	out := new(MembersServiceUpdateMemberTypeResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MembersService/UpdateMemberType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServiceServer is the server API for MembersService service.
// All implementations should embed UnimplementedMembersServiceServer
// for forward compatibility
type MembersServiceServer interface {
	// Ping checks if a service is live
	Ping(context.Context, *MembersServicePingRequest) (*MembersServicePingResponse, error)
	// Add adds a member to a project
	Add(context.Context, *MembersServiceAddRequest) (*MembersServiceAddResponse, error)
	// RemoveMember removes a member from a namespace
	Remove(context.Context, *MembersServiceRemoveRequest) (*MembersServiceRemoveResponse, error)
	// Regsiter creates a new member
	Register(context.Context, *MembersServiceRegisterRequest) (*MembersServiceRegisterResponse, error)
	// Authenticates a member
	Login(context.Context, *MembersServiceLoginRequest) (*MembersServiceLoginResponse, error)
	// updates the users password
	UpdatePassword(context.Context, *MembersServiceUpdatePasswordRequest) (*MembersServiceUpdatePasswordResponse, error)
	// updates the members profile
	UpdateProfile(context.Context, *MembersServiceUpdateProfileRequest) (*MembersServiceUpdateProfileResponse, error)
	// ListMembers returns a list of claimed and unclaimed members
	List(context.Context, *MembersServiceListRequest) (*MembersServiceListResponse, error)
	// Get returns a specific member
	Get(context.Context, *MembersServiceGetRequest) (*MembersServiceGetResponse, error)
	// RefreshToken refreshes a token and returns a new access/refresh token pair
	RefreshToken(context.Context, *MembersServiceRefreshTokenRequest) (*MembersServiceRefreshTokenResponse, error)
	// UpdateMemberType updates the member type
	UpdateMemberType(context.Context, *MembersServiceUpdateMemberTypeRequest) (*MembersServiceUpdateMemberTypeResponse, error)
}

// UnimplementedMembersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMembersServiceServer struct {
}

func (UnimplementedMembersServiceServer) Ping(context.Context, *MembersServicePingRequest) (*MembersServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMembersServiceServer) Add(context.Context, *MembersServiceAddRequest) (*MembersServiceAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMembersServiceServer) Remove(context.Context, *MembersServiceRemoveRequest) (*MembersServiceRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedMembersServiceServer) Register(context.Context, *MembersServiceRegisterRequest) (*MembersServiceRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMembersServiceServer) Login(context.Context, *MembersServiceLoginRequest) (*MembersServiceLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMembersServiceServer) UpdatePassword(context.Context, *MembersServiceUpdatePasswordRequest) (*MembersServiceUpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedMembersServiceServer) UpdateProfile(context.Context, *MembersServiceUpdateProfileRequest) (*MembersServiceUpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedMembersServiceServer) List(context.Context, *MembersServiceListRequest) (*MembersServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMembersServiceServer) Get(context.Context, *MembersServiceGetRequest) (*MembersServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMembersServiceServer) RefreshToken(context.Context, *MembersServiceRefreshTokenRequest) (*MembersServiceRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedMembersServiceServer) UpdateMemberType(context.Context, *MembersServiceUpdateMemberTypeRequest) (*MembersServiceUpdateMemberTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberType not implemented")
}

// UnsafeMembersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServiceServer will
// result in compilation errors.
type UnsafeMembersServiceServer interface {
	mustEmbedUnimplementedMembersServiceServer()
}

func RegisterMembersServiceServer(s grpc.ServiceRegistrar, srv MembersServiceServer) {
	s.RegisterService(&MembersService_ServiceDesc, srv)
}

func _MembersService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Ping(ctx, req.(*MembersServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Add(ctx, req.(*MembersServiceAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Remove(ctx, req.(*MembersServiceRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Register(ctx, req.(*MembersServiceRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Login(ctx, req.(*MembersServiceLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceUpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).UpdatePassword(ctx, req.(*MembersServiceUpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceUpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).UpdateProfile(ctx, req.(*MembersServiceUpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).List(ctx, req.(*MembersServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Get(ctx, req.(*MembersServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).RefreshToken(ctx, req.(*MembersServiceRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_UpdateMemberType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersServiceUpdateMemberTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).UpdateMemberType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MembersService/UpdateMemberType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).UpdateMemberType(ctx, req.(*MembersServiceUpdateMemberTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MembersService_ServiceDesc is the grpc.ServiceDesc for MembersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.MembersService",
	HandlerType: (*MembersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MembersService_Ping_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MembersService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MembersService_Remove_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MembersService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MembersService_Login_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _MembersService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _MembersService_UpdateProfile_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MembersService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MembersService_Get_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _MembersService_RefreshToken_Handler,
		},
		{
			MethodName: "UpdateMemberType",
			Handler:    _MembersService_UpdateMemberType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_members.proto",
}
