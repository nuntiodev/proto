// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/users/v1alpha1/users_authentication.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	// Updates a specific OAuth2 Provider
	Ping(ctx context.Context, in *AuthenticationServicePingRequest, opts ...grpc.CallOption) (*AuthenticationServicePingResponse, error)
	// Updates a specific OAuth2 Provider
	GetOAuth2Providers(ctx context.Context, in *AuthenticationServiceGetOAuth2ProvidersRequest, opts ...grpc.CallOption) (*AuthenticationServiceGetOAuth2ProvidersResponse, error)
	// Updates a specific OAuth2 Provider
	UpdateOAuth2Provider(ctx context.Context, in *AuthenticationServiceUpdateOAuth2ProviderRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateOAuth2ProviderResponse, error)
	// Update allowed callbacks in Users
	UpdateCallbacks(ctx context.Context, in *AuthenticationServiceUpdateCallbacksRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateCallbacksResponse, error)
	// Set default hashing algorithm
	UpdateHashingAlgorithm(ctx context.Context, in *AuthenticationServiceUpdateHashingAlgorithmRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateHashingAlgorithmResponse, error)
	// Set supported login settings
	UpdateLoginSettings(ctx context.Context, in *AuthenticationServiceUpdateLoginSettingsRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateLoginSettingsResponse, error)
	// Update token settings (eg. ttl)
	UpdateTokenSettings(ctx context.Context, in *AuthenticationServiceUpdateTokenSettingsRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateTokenSettingsResponse, error)
	// Update email or text template
	UpdateTemplate(ctx context.Context, in *AuthenticationServiceUpdateTemplateRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateTemplateResponse, error)
	// Validate user credentials
	ValidateCredentials(ctx context.Context, in *AuthenticationServiceValidateCredentialsRequest, opts ...grpc.CallOption) (*AuthenticationServiceValidateCredentialsResponse, error)
	// Create token pair for user
	CreateTokenPair(ctx context.Context, in *AuthenticationServiceCreateTokenPairRequest, opts ...grpc.CallOption) (*AuthenticationServiceCreateTokenPairResponse, error)
	// Validate a token
	ValidateToken(ctx context.Context, in *AuthenticationServiceValidateTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceValidateTokenResponse, error)
	// Block a token
	BlockToken(ctx context.Context, in *AuthenticationServiceBlockTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceBlockTokenResponse, error)
	// Send a reset password email
	SendResetPasswordEmail(ctx context.Context, in *AuthenticationServiceSendResetPasswordEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendResetPasswordEmailResponse, error)
	// Send a reset password text
	SendResetPasswordText(ctx context.Context, in *AuthenticationServiceSendResetPasswordTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendResetPasswordTextResponse, error)
	// Send a verification email to validate email
	SendVerificationEmail(ctx context.Context, in *AuthenticationServiceSendVerificationEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendVerificationEmailResponse, error)
	// Send a verification text to validate number
	SendVerificationText(ctx context.Context, in *AuthenticationServiceSendVerificationTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendVerificationTextResponse, error)
	// Verify email with code
	VerifyEmail(ctx context.Context, in *AuthenticationServiceVerifyEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyEmailResponse, error)
	// Verify phone with code
	VerifyPhone(ctx context.Context, in *AuthenticationServiceVerifyPhoneRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyPhoneResponse, error)
	// Reset password with code and new password
	ResetPassword(ctx context.Context, in *AuthenticationServiceResetPasswordRequest, opts ...grpc.CallOption) (*AuthenticationServiceResetPasswordResponse, error)
	// Continue with OAuth2 provider
	ContinueWith(ctx context.Context, in *AuthenticationServiceContinueWithRequest, opts ...grpc.CallOption) (*AuthenticationServiceContinueWithResponse, error)
	// Redirect handles the callback from the OAuth2 provider
	Redirect(ctx context.Context, in *AuthenticationServiceRedirectRequest, opts ...grpc.CallOption) (*AuthenticationServiceRedirectResponse, error)
	// Logout blocks tokens of a given session
	Logout(ctx context.Context, in *AuthenticationServiceLogoutRequest, opts ...grpc.CallOption) (*AuthenticationServiceLogoutResponse, error)
	// Login issues a token pair after validating credentials
	Login(ctx context.Context, in *AuthenticationServiceLoginRequest, opts ...grpc.CallOption) (*AuthenticationServiceLoginResponse, error)
	// Refreshes the access token and issues new refresh token
	RefreshToken(ctx context.Context, in *AuthenticationServiceRefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceRefreshTokenResponse, error)
	// SendMagicEmail sends a code to your email to login
	SendMagicEmail(ctx context.Context, in *AuthenticationServiceSendMagicEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendMagicEmailResponse, error)
	// SendMagicEmail sends a code to your phone to login
	SendMagicText(ctx context.Context, in *AuthenticationServiceSendMagicTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendMagicTextResponse, error)
	// Verifies a code and returns a set of tokens
	VerifyMagicCode(ctx context.Context, in *AuthenticationServiceVerifyMagicCodeRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyMagicCodeResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) Ping(ctx context.Context, in *AuthenticationServicePingRequest, opts ...grpc.CallOption) (*AuthenticationServicePingResponse, error) {
	out := new(AuthenticationServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetOAuth2Providers(ctx context.Context, in *AuthenticationServiceGetOAuth2ProvidersRequest, opts ...grpc.CallOption) (*AuthenticationServiceGetOAuth2ProvidersResponse, error) {
	out := new(AuthenticationServiceGetOAuth2ProvidersResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/GetOAuth2Providers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateOAuth2Provider(ctx context.Context, in *AuthenticationServiceUpdateOAuth2ProviderRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateOAuth2ProviderResponse, error) {
	out := new(AuthenticationServiceUpdateOAuth2ProviderResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateOAuth2Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateCallbacks(ctx context.Context, in *AuthenticationServiceUpdateCallbacksRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateCallbacksResponse, error) {
	out := new(AuthenticationServiceUpdateCallbacksResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateCallbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateHashingAlgorithm(ctx context.Context, in *AuthenticationServiceUpdateHashingAlgorithmRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateHashingAlgorithmResponse, error) {
	out := new(AuthenticationServiceUpdateHashingAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateHashingAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateLoginSettings(ctx context.Context, in *AuthenticationServiceUpdateLoginSettingsRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateLoginSettingsResponse, error) {
	out := new(AuthenticationServiceUpdateLoginSettingsResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateLoginSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateTokenSettings(ctx context.Context, in *AuthenticationServiceUpdateTokenSettingsRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateTokenSettingsResponse, error) {
	out := new(AuthenticationServiceUpdateTokenSettingsResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateTokenSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateTemplate(ctx context.Context, in *AuthenticationServiceUpdateTemplateRequest, opts ...grpc.CallOption) (*AuthenticationServiceUpdateTemplateResponse, error) {
	out := new(AuthenticationServiceUpdateTemplateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateCredentials(ctx context.Context, in *AuthenticationServiceValidateCredentialsRequest, opts ...grpc.CallOption) (*AuthenticationServiceValidateCredentialsResponse, error) {
	out := new(AuthenticationServiceValidateCredentialsResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/ValidateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) CreateTokenPair(ctx context.Context, in *AuthenticationServiceCreateTokenPairRequest, opts ...grpc.CallOption) (*AuthenticationServiceCreateTokenPairResponse, error) {
	out := new(AuthenticationServiceCreateTokenPairResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/CreateTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateToken(ctx context.Context, in *AuthenticationServiceValidateTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceValidateTokenResponse, error) {
	out := new(AuthenticationServiceValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) BlockToken(ctx context.Context, in *AuthenticationServiceBlockTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceBlockTokenResponse, error) {
	out := new(AuthenticationServiceBlockTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/BlockToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendResetPasswordEmail(ctx context.Context, in *AuthenticationServiceSendResetPasswordEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendResetPasswordEmailResponse, error) {
	out := new(AuthenticationServiceSendResetPasswordEmailResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendResetPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendResetPasswordText(ctx context.Context, in *AuthenticationServiceSendResetPasswordTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendResetPasswordTextResponse, error) {
	out := new(AuthenticationServiceSendResetPasswordTextResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendResetPasswordText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendVerificationEmail(ctx context.Context, in *AuthenticationServiceSendVerificationEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendVerificationEmailResponse, error) {
	out := new(AuthenticationServiceSendVerificationEmailResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendVerificationText(ctx context.Context, in *AuthenticationServiceSendVerificationTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendVerificationTextResponse, error) {
	out := new(AuthenticationServiceSendVerificationTextResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendVerificationText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyEmail(ctx context.Context, in *AuthenticationServiceVerifyEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyEmailResponse, error) {
	out := new(AuthenticationServiceVerifyEmailResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyPhone(ctx context.Context, in *AuthenticationServiceVerifyPhoneRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyPhoneResponse, error) {
	out := new(AuthenticationServiceVerifyPhoneResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/VerifyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ResetPassword(ctx context.Context, in *AuthenticationServiceResetPasswordRequest, opts ...grpc.CallOption) (*AuthenticationServiceResetPasswordResponse, error) {
	out := new(AuthenticationServiceResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ContinueWith(ctx context.Context, in *AuthenticationServiceContinueWithRequest, opts ...grpc.CallOption) (*AuthenticationServiceContinueWithResponse, error) {
	out := new(AuthenticationServiceContinueWithResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/ContinueWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Redirect(ctx context.Context, in *AuthenticationServiceRedirectRequest, opts ...grpc.CallOption) (*AuthenticationServiceRedirectResponse, error) {
	out := new(AuthenticationServiceRedirectResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Logout(ctx context.Context, in *AuthenticationServiceLogoutRequest, opts ...grpc.CallOption) (*AuthenticationServiceLogoutResponse, error) {
	out := new(AuthenticationServiceLogoutResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Login(ctx context.Context, in *AuthenticationServiceLoginRequest, opts ...grpc.CallOption) (*AuthenticationServiceLoginResponse, error) {
	out := new(AuthenticationServiceLoginResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) RefreshToken(ctx context.Context, in *AuthenticationServiceRefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationServiceRefreshTokenResponse, error) {
	out := new(AuthenticationServiceRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendMagicEmail(ctx context.Context, in *AuthenticationServiceSendMagicEmailRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendMagicEmailResponse, error) {
	out := new(AuthenticationServiceSendMagicEmailResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendMagicEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendMagicText(ctx context.Context, in *AuthenticationServiceSendMagicTextRequest, opts ...grpc.CallOption) (*AuthenticationServiceSendMagicTextResponse, error) {
	out := new(AuthenticationServiceSendMagicTextResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/SendMagicText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyMagicCode(ctx context.Context, in *AuthenticationServiceVerifyMagicCodeRequest, opts ...grpc.CallOption) (*AuthenticationServiceVerifyMagicCodeResponse, error) {
	out := new(AuthenticationServiceVerifyMagicCodeResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.AuthenticationService/VerifyMagicCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations should embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	// Updates a specific OAuth2 Provider
	Ping(context.Context, *AuthenticationServicePingRequest) (*AuthenticationServicePingResponse, error)
	// Updates a specific OAuth2 Provider
	GetOAuth2Providers(context.Context, *AuthenticationServiceGetOAuth2ProvidersRequest) (*AuthenticationServiceGetOAuth2ProvidersResponse, error)
	// Updates a specific OAuth2 Provider
	UpdateOAuth2Provider(context.Context, *AuthenticationServiceUpdateOAuth2ProviderRequest) (*AuthenticationServiceUpdateOAuth2ProviderResponse, error)
	// Update allowed callbacks in Users
	UpdateCallbacks(context.Context, *AuthenticationServiceUpdateCallbacksRequest) (*AuthenticationServiceUpdateCallbacksResponse, error)
	// Set default hashing algorithm
	UpdateHashingAlgorithm(context.Context, *AuthenticationServiceUpdateHashingAlgorithmRequest) (*AuthenticationServiceUpdateHashingAlgorithmResponse, error)
	// Set supported login settings
	UpdateLoginSettings(context.Context, *AuthenticationServiceUpdateLoginSettingsRequest) (*AuthenticationServiceUpdateLoginSettingsResponse, error)
	// Update token settings (eg. ttl)
	UpdateTokenSettings(context.Context, *AuthenticationServiceUpdateTokenSettingsRequest) (*AuthenticationServiceUpdateTokenSettingsResponse, error)
	// Update email or text template
	UpdateTemplate(context.Context, *AuthenticationServiceUpdateTemplateRequest) (*AuthenticationServiceUpdateTemplateResponse, error)
	// Validate user credentials
	ValidateCredentials(context.Context, *AuthenticationServiceValidateCredentialsRequest) (*AuthenticationServiceValidateCredentialsResponse, error)
	// Create token pair for user
	CreateTokenPair(context.Context, *AuthenticationServiceCreateTokenPairRequest) (*AuthenticationServiceCreateTokenPairResponse, error)
	// Validate a token
	ValidateToken(context.Context, *AuthenticationServiceValidateTokenRequest) (*AuthenticationServiceValidateTokenResponse, error)
	// Block a token
	BlockToken(context.Context, *AuthenticationServiceBlockTokenRequest) (*AuthenticationServiceBlockTokenResponse, error)
	// Send a reset password email
	SendResetPasswordEmail(context.Context, *AuthenticationServiceSendResetPasswordEmailRequest) (*AuthenticationServiceSendResetPasswordEmailResponse, error)
	// Send a reset password text
	SendResetPasswordText(context.Context, *AuthenticationServiceSendResetPasswordTextRequest) (*AuthenticationServiceSendResetPasswordTextResponse, error)
	// Send a verification email to validate email
	SendVerificationEmail(context.Context, *AuthenticationServiceSendVerificationEmailRequest) (*AuthenticationServiceSendVerificationEmailResponse, error)
	// Send a verification text to validate number
	SendVerificationText(context.Context, *AuthenticationServiceSendVerificationTextRequest) (*AuthenticationServiceSendVerificationTextResponse, error)
	// Verify email with code
	VerifyEmail(context.Context, *AuthenticationServiceVerifyEmailRequest) (*AuthenticationServiceVerifyEmailResponse, error)
	// Verify phone with code
	VerifyPhone(context.Context, *AuthenticationServiceVerifyPhoneRequest) (*AuthenticationServiceVerifyPhoneResponse, error)
	// Reset password with code and new password
	ResetPassword(context.Context, *AuthenticationServiceResetPasswordRequest) (*AuthenticationServiceResetPasswordResponse, error)
	// Continue with OAuth2 provider
	ContinueWith(context.Context, *AuthenticationServiceContinueWithRequest) (*AuthenticationServiceContinueWithResponse, error)
	// Redirect handles the callback from the OAuth2 provider
	Redirect(context.Context, *AuthenticationServiceRedirectRequest) (*AuthenticationServiceRedirectResponse, error)
	// Logout blocks tokens of a given session
	Logout(context.Context, *AuthenticationServiceLogoutRequest) (*AuthenticationServiceLogoutResponse, error)
	// Login issues a token pair after validating credentials
	Login(context.Context, *AuthenticationServiceLoginRequest) (*AuthenticationServiceLoginResponse, error)
	// Refreshes the access token and issues new refresh token
	RefreshToken(context.Context, *AuthenticationServiceRefreshTokenRequest) (*AuthenticationServiceRefreshTokenResponse, error)
	// SendMagicEmail sends a code to your email to login
	SendMagicEmail(context.Context, *AuthenticationServiceSendMagicEmailRequest) (*AuthenticationServiceSendMagicEmailResponse, error)
	// SendMagicEmail sends a code to your phone to login
	SendMagicText(context.Context, *AuthenticationServiceSendMagicTextRequest) (*AuthenticationServiceSendMagicTextResponse, error)
	// Verifies a code and returns a set of tokens
	VerifyMagicCode(context.Context, *AuthenticationServiceVerifyMagicCodeRequest) (*AuthenticationServiceVerifyMagicCodeResponse, error)
}

// UnimplementedAuthenticationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) Ping(context.Context, *AuthenticationServicePingRequest) (*AuthenticationServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetOAuth2Providers(context.Context, *AuthenticationServiceGetOAuth2ProvidersRequest) (*AuthenticationServiceGetOAuth2ProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuth2Providers not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateOAuth2Provider(context.Context, *AuthenticationServiceUpdateOAuth2ProviderRequest) (*AuthenticationServiceUpdateOAuth2ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuth2Provider not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateCallbacks(context.Context, *AuthenticationServiceUpdateCallbacksRequest) (*AuthenticationServiceUpdateCallbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCallbacks not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateHashingAlgorithm(context.Context, *AuthenticationServiceUpdateHashingAlgorithmRequest) (*AuthenticationServiceUpdateHashingAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashingAlgorithm not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateLoginSettings(context.Context, *AuthenticationServiceUpdateLoginSettingsRequest) (*AuthenticationServiceUpdateLoginSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginSettings not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateTokenSettings(context.Context, *AuthenticationServiceUpdateTokenSettingsRequest) (*AuthenticationServiceUpdateTokenSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenSettings not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateTemplate(context.Context, *AuthenticationServiceUpdateTemplateRequest) (*AuthenticationServiceUpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateCredentials(context.Context, *AuthenticationServiceValidateCredentialsRequest) (*AuthenticationServiceValidateCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCredentials not implemented")
}
func (UnimplementedAuthenticationServiceServer) CreateTokenPair(context.Context, *AuthenticationServiceCreateTokenPairRequest) (*AuthenticationServiceCreateTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenPair not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateToken(context.Context, *AuthenticationServiceValidateTokenRequest) (*AuthenticationServiceValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) BlockToken(context.Context, *AuthenticationServiceBlockTokenRequest) (*AuthenticationServiceBlockTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendResetPasswordEmail(context.Context, *AuthenticationServiceSendResetPasswordEmailRequest) (*AuthenticationServiceSendResetPasswordEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendResetPasswordText(context.Context, *AuthenticationServiceSendResetPasswordTextRequest) (*AuthenticationServiceSendResetPasswordTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordText not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendVerificationEmail(context.Context, *AuthenticationServiceSendVerificationEmailRequest) (*AuthenticationServiceSendVerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendVerificationText(context.Context, *AuthenticationServiceSendVerificationTextRequest) (*AuthenticationServiceSendVerificationTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationText not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyEmail(context.Context, *AuthenticationServiceVerifyEmailRequest) (*AuthenticationServiceVerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyPhone(context.Context, *AuthenticationServiceVerifyPhoneRequest) (*AuthenticationServiceVerifyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedAuthenticationServiceServer) ResetPassword(context.Context, *AuthenticationServiceResetPasswordRequest) (*AuthenticationServiceResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthenticationServiceServer) ContinueWith(context.Context, *AuthenticationServiceContinueWithRequest) (*AuthenticationServiceContinueWithResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueWith not implemented")
}
func (UnimplementedAuthenticationServiceServer) Redirect(context.Context, *AuthenticationServiceRedirectRequest) (*AuthenticationServiceRedirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedAuthenticationServiceServer) Logout(context.Context, *AuthenticationServiceLogoutRequest) (*AuthenticationServiceLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthenticationServiceServer) Login(context.Context, *AuthenticationServiceLoginRequest) (*AuthenticationServiceLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationServiceServer) RefreshToken(context.Context, *AuthenticationServiceRefreshTokenRequest) (*AuthenticationServiceRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendMagicEmail(context.Context, *AuthenticationServiceSendMagicEmailRequest) (*AuthenticationServiceSendMagicEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMagicEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendMagicText(context.Context, *AuthenticationServiceSendMagicTextRequest) (*AuthenticationServiceSendMagicTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMagicText not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyMagicCode(context.Context, *AuthenticationServiceVerifyMagicCodeRequest) (*AuthenticationServiceVerifyMagicCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMagicCode not implemented")
}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Ping(ctx, req.(*AuthenticationServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetOAuth2Providers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceGetOAuth2ProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetOAuth2Providers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/GetOAuth2Providers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetOAuth2Providers(ctx, req.(*AuthenticationServiceGetOAuth2ProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateOAuth2Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateOAuth2ProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateOAuth2Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateOAuth2Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateOAuth2Provider(ctx, req.(*AuthenticationServiceUpdateOAuth2ProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateCallbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateCallbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateCallbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateCallbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateCallbacks(ctx, req.(*AuthenticationServiceUpdateCallbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateHashingAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateHashingAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateHashingAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateHashingAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateHashingAlgorithm(ctx, req.(*AuthenticationServiceUpdateHashingAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateLoginSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateLoginSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateLoginSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateLoginSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateLoginSettings(ctx, req.(*AuthenticationServiceUpdateLoginSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateTokenSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateTokenSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateTokenSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateTokenSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateTokenSettings(ctx, req.(*AuthenticationServiceUpdateTokenSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceUpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateTemplate(ctx, req.(*AuthenticationServiceUpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceValidateCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/ValidateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateCredentials(ctx, req.(*AuthenticationServiceValidateCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_CreateTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceCreateTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/CreateTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateTokenPair(ctx, req.(*AuthenticationServiceCreateTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateToken(ctx, req.(*AuthenticationServiceValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_BlockToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceBlockTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).BlockToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/BlockToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).BlockToken(ctx, req.(*AuthenticationServiceBlockTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendResetPasswordEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendResetPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendResetPasswordEmail(ctx, req.(*AuthenticationServiceSendResetPasswordEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendResetPasswordText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendResetPasswordTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendResetPasswordText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendResetPasswordText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendResetPasswordText(ctx, req.(*AuthenticationServiceSendResetPasswordTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendVerificationEmail(ctx, req.(*AuthenticationServiceSendVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendVerificationText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendVerificationTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendVerificationText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendVerificationText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendVerificationText(ctx, req.(*AuthenticationServiceSendVerificationTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceVerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyEmail(ctx, req.(*AuthenticationServiceVerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceVerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/VerifyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyPhone(ctx, req.(*AuthenticationServiceVerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ResetPassword(ctx, req.(*AuthenticationServiceResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ContinueWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceContinueWithRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ContinueWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/ContinueWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ContinueWith(ctx, req.(*AuthenticationServiceContinueWithRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceRedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Redirect(ctx, req.(*AuthenticationServiceRedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Logout(ctx, req.(*AuthenticationServiceLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Login(ctx, req.(*AuthenticationServiceLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).RefreshToken(ctx, req.(*AuthenticationServiceRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendMagicEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendMagicEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendMagicEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendMagicEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendMagicEmail(ctx, req.(*AuthenticationServiceSendMagicEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendMagicText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceSendMagicTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendMagicText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/SendMagicText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendMagicText(ctx, req.(*AuthenticationServiceSendMagicTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyMagicCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationServiceVerifyMagicCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyMagicCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.AuthenticationService/VerifyMagicCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyMagicCode(ctx, req.(*AuthenticationServiceVerifyMagicCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.users.v1alpha1.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AuthenticationService_Ping_Handler,
		},
		{
			MethodName: "GetOAuth2Providers",
			Handler:    _AuthenticationService_GetOAuth2Providers_Handler,
		},
		{
			MethodName: "UpdateOAuth2Provider",
			Handler:    _AuthenticationService_UpdateOAuth2Provider_Handler,
		},
		{
			MethodName: "UpdateCallbacks",
			Handler:    _AuthenticationService_UpdateCallbacks_Handler,
		},
		{
			MethodName: "UpdateHashingAlgorithm",
			Handler:    _AuthenticationService_UpdateHashingAlgorithm_Handler,
		},
		{
			MethodName: "UpdateLoginSettings",
			Handler:    _AuthenticationService_UpdateLoginSettings_Handler,
		},
		{
			MethodName: "UpdateTokenSettings",
			Handler:    _AuthenticationService_UpdateTokenSettings_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _AuthenticationService_UpdateTemplate_Handler,
		},
		{
			MethodName: "ValidateCredentials",
			Handler:    _AuthenticationService_ValidateCredentials_Handler,
		},
		{
			MethodName: "CreateTokenPair",
			Handler:    _AuthenticationService_CreateTokenPair_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthenticationService_ValidateToken_Handler,
		},
		{
			MethodName: "BlockToken",
			Handler:    _AuthenticationService_BlockToken_Handler,
		},
		{
			MethodName: "SendResetPasswordEmail",
			Handler:    _AuthenticationService_SendResetPasswordEmail_Handler,
		},
		{
			MethodName: "SendResetPasswordText",
			Handler:    _AuthenticationService_SendResetPasswordText_Handler,
		},
		{
			MethodName: "SendVerificationEmail",
			Handler:    _AuthenticationService_SendVerificationEmail_Handler,
		},
		{
			MethodName: "SendVerificationText",
			Handler:    _AuthenticationService_SendVerificationText_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthenticationService_VerifyEmail_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _AuthenticationService_VerifyPhone_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthenticationService_ResetPassword_Handler,
		},
		{
			MethodName: "ContinueWith",
			Handler:    _AuthenticationService_ContinueWith_Handler,
		},
		{
			MethodName: "Redirect",
			Handler:    _AuthenticationService_Redirect_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthenticationService_Logout_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthenticationService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthenticationService_RefreshToken_Handler,
		},
		{
			MethodName: "SendMagicEmail",
			Handler:    _AuthenticationService_SendMagicEmail_Handler,
		},
		{
			MethodName: "SendMagicText",
			Handler:    _AuthenticationService_SendMagicText_Handler,
		},
		{
			MethodName: "VerifyMagicCode",
			Handler:    _AuthenticationService_VerifyMagicCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/users/v1alpha1/users_authentication.proto",
}
