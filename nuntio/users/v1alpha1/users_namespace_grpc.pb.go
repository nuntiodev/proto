// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/users/v1alpha1/users_namespace.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceServiceClient is the client API for NamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceServiceClient interface {
	// Ping a server to check if it is live
	Ping(ctx context.Context, in *NamespaceServicePingRequest, opts ...grpc.CallOption) (*NamespaceServicePingResponse, error)
	// Create namespace
	Create(ctx context.Context, in *NamespaceServiceCreateRequest, opts ...grpc.CallOption) (*NamespaceServiceCreateResponse, error)
	// Delete namespace (everything in Users)
	Delete(ctx context.Context, in *NamespaceServiceDeleteRequest, opts ...grpc.CallOption) (*NamespaceServiceDeleteResponse, error)
	// Get namespace config
	Get(ctx context.Context, in *NamespaceServiceGetRequest, opts ...grpc.CallOption) (*NamespaceServiceGetResponse, error)
	// Update updates the profile of the namespace
	Update(ctx context.Context, in *NamespaceServiceUpdateRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateResponse, error)
	// UpdateEmailProvider updates the email provider of the namespace
	UpdateEmailProvider(ctx context.Context, in *NamespaceServiceUpdateEmailProviderRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateEmailProviderResponse, error)
	// UpdateTextProvider updates the text provider of the namespace
	UpdateTextProvider(ctx context.Context, in *NamespaceServiceUpdateTextProviderRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateTextProviderResponse, error)
	// Get public key of system
	PublicKey(ctx context.Context, in *NamespaceServicePublicKeyRequest, opts ...grpc.CallOption) (*NamespaceServicePublicKeyResponse, error)
}

type namespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceServiceClient(cc grpc.ClientConnInterface) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) Ping(ctx context.Context, in *NamespaceServicePingRequest, opts ...grpc.CallOption) (*NamespaceServicePingResponse, error) {
	out := new(NamespaceServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) Create(ctx context.Context, in *NamespaceServiceCreateRequest, opts ...grpc.CallOption) (*NamespaceServiceCreateResponse, error) {
	out := new(NamespaceServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) Delete(ctx context.Context, in *NamespaceServiceDeleteRequest, opts ...grpc.CallOption) (*NamespaceServiceDeleteResponse, error) {
	out := new(NamespaceServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) Get(ctx context.Context, in *NamespaceServiceGetRequest, opts ...grpc.CallOption) (*NamespaceServiceGetResponse, error) {
	out := new(NamespaceServiceGetResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) Update(ctx context.Context, in *NamespaceServiceUpdateRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateResponse, error) {
	out := new(NamespaceServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) UpdateEmailProvider(ctx context.Context, in *NamespaceServiceUpdateEmailProviderRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateEmailProviderResponse, error) {
	out := new(NamespaceServiceUpdateEmailProviderResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/UpdateEmailProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) UpdateTextProvider(ctx context.Context, in *NamespaceServiceUpdateTextProviderRequest, opts ...grpc.CallOption) (*NamespaceServiceUpdateTextProviderResponse, error) {
	out := new(NamespaceServiceUpdateTextProviderResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/UpdateTextProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) PublicKey(ctx context.Context, in *NamespaceServicePublicKeyRequest, opts ...grpc.CallOption) (*NamespaceServicePublicKeyResponse, error) {
	out := new(NamespaceServicePublicKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.NamespaceService/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServiceServer is the server API for NamespaceService service.
// All implementations should embed UnimplementedNamespaceServiceServer
// for forward compatibility
type NamespaceServiceServer interface {
	// Ping a server to check if it is live
	Ping(context.Context, *NamespaceServicePingRequest) (*NamespaceServicePingResponse, error)
	// Create namespace
	Create(context.Context, *NamespaceServiceCreateRequest) (*NamespaceServiceCreateResponse, error)
	// Delete namespace (everything in Users)
	Delete(context.Context, *NamespaceServiceDeleteRequest) (*NamespaceServiceDeleteResponse, error)
	// Get namespace config
	Get(context.Context, *NamespaceServiceGetRequest) (*NamespaceServiceGetResponse, error)
	// Update updates the profile of the namespace
	Update(context.Context, *NamespaceServiceUpdateRequest) (*NamespaceServiceUpdateResponse, error)
	// UpdateEmailProvider updates the email provider of the namespace
	UpdateEmailProvider(context.Context, *NamespaceServiceUpdateEmailProviderRequest) (*NamespaceServiceUpdateEmailProviderResponse, error)
	// UpdateTextProvider updates the text provider of the namespace
	UpdateTextProvider(context.Context, *NamespaceServiceUpdateTextProviderRequest) (*NamespaceServiceUpdateTextProviderResponse, error)
	// Get public key of system
	PublicKey(context.Context, *NamespaceServicePublicKeyRequest) (*NamespaceServicePublicKeyResponse, error)
}

// UnimplementedNamespaceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNamespaceServiceServer struct {
}

func (UnimplementedNamespaceServiceServer) Ping(context.Context, *NamespaceServicePingRequest) (*NamespaceServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNamespaceServiceServer) Create(context.Context, *NamespaceServiceCreateRequest) (*NamespaceServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespaceServiceServer) Delete(context.Context, *NamespaceServiceDeleteRequest) (*NamespaceServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespaceServiceServer) Get(context.Context, *NamespaceServiceGetRequest) (*NamespaceServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNamespaceServiceServer) Update(context.Context, *NamespaceServiceUpdateRequest) (*NamespaceServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNamespaceServiceServer) UpdateEmailProvider(context.Context, *NamespaceServiceUpdateEmailProviderRequest) (*NamespaceServiceUpdateEmailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailProvider not implemented")
}
func (UnimplementedNamespaceServiceServer) UpdateTextProvider(context.Context, *NamespaceServiceUpdateTextProviderRequest) (*NamespaceServiceUpdateTextProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextProvider not implemented")
}
func (UnimplementedNamespaceServiceServer) PublicKey(context.Context, *NamespaceServicePublicKeyRequest) (*NamespaceServicePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}

// UnsafeNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServiceServer will
// result in compilation errors.
type UnsafeNamespaceServiceServer interface {
	mustEmbedUnimplementedNamespaceServiceServer()
}

func RegisterNamespaceServiceServer(s grpc.ServiceRegistrar, srv NamespaceServiceServer) {
	s.RegisterService(&NamespaceService_ServiceDesc, srv)
}

func _NamespaceService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).Ping(ctx, req.(*NamespaceServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).Create(ctx, req.(*NamespaceServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).Delete(ctx, req.(*NamespaceServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).Get(ctx, req.(*NamespaceServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).Update(ctx, req.(*NamespaceServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_UpdateEmailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceUpdateEmailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).UpdateEmailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/UpdateEmailProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).UpdateEmailProvider(ctx, req.(*NamespaceServiceUpdateEmailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_UpdateTextProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServiceUpdateTextProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).UpdateTextProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/UpdateTextProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).UpdateTextProvider(ctx, req.(*NamespaceServiceUpdateTextProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceServicePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.NamespaceService/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).PublicKey(ctx, req.(*NamespaceServicePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceService_ServiceDesc is the grpc.ServiceDesc for NamespaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.users.v1alpha1.NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NamespaceService_Ping_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NamespaceService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NamespaceService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NamespaceService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NamespaceService_Update_Handler,
		},
		{
			MethodName: "UpdateEmailProvider",
			Handler:    _NamespaceService_UpdateEmailProvider_Handler,
		},
		{
			MethodName: "UpdateTextProvider",
			Handler:    _NamespaceService_UpdateTextProvider_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _NamespaceService_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/users/v1alpha1/users_namespace.proto",
}
