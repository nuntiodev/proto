syntax = "proto3";

package nuntio.users.v1alpha1;

import "nuntio/users/v1alpha1/users_messages.proto";

option go_package = "./nuntio/users/v1alpha1";
option csharp_namespace = "nuntio.users.v1alpha1";
option java_multiple_files = true;
option java_package = "nuntio.users.v1alpha1";
option php_namespace = "Nuntio\\Users\\v1alpha1";

// The service to manage your namespace in Users
service NamespaceService {
    // Ping a server to check if it is live
    rpc Ping(NamespaceServicePingRequest) returns (NamespaceServicePingResponse) {}
    // Create namespace
    rpc Create(NamespaceServiceCreateRequest) returns (NamespaceServiceCreateResponse) {}
    // Delete namespace (everything in Users)
    rpc Delete(NamespaceServiceDeleteRequest) returns (NamespaceServiceDeleteResponse) {}
    // Get namespace config
    rpc Get(NamespaceServiceGetRequest) returns (NamespaceServiceGetResponse) {}
    // Update updates the profile of the namespace
    rpc Update(NamespaceServiceUpdateRequest) returns (NamespaceServiceUpdateResponse) {}
    // UpdateEmailProvider updates the email provider of the namespace
    rpc UpdateEmailProvider(NamespaceServiceUpdateEmailProviderRequest) returns (NamespaceServiceUpdateEmailProviderResponse) {}
    // UpdateTextProvider updates the text provider of the namespace
    rpc UpdateTextProvider(NamespaceServiceUpdateTextProviderRequest) returns (NamespaceServiceUpdateTextProviderResponse) {}
   // Updates a specific OAuth2 Provider
   rpc UpdateOAuth2Provider(NamespaceServiceUpdateOAuth2ProviderRequest) returns (NamespaceServiceUpdateOAuth2ProviderResponse) {}
   // Update allowed callbacks in Users
   rpc UpdateCallbacks(NamespaceServiceUpdateCallbacksRequest) returns (NamespaceServiceUpdateCallbacksResponse) {}
   // Set default hashing algorithm
   rpc UpdateHashingAlgorithm(NamespaceServiceUpdateHashingAlgorithmRequest) returns (NamespaceServiceUpdateHashingAlgorithmResponse) {}
   // Set supported login settings
   rpc UpdateLoginSettings(NamespaceServiceUpdateLoginSettingsRequest) returns (NamespaceServiceUpdateLoginSettingsResponse) {}
   // Update token settings (eg. ttl)
   rpc UpdateTokenSettings(NamespaceServiceUpdateTokenSettingsRequest)returns (NamespaceServiceUpdateTokenSettingsResponse) {}
   // Update email or text template
   rpc UpdateTemplate(NamespaceServiceUpdateTemplateRequest) returns (NamespaceServiceUpdateTemplateResponse) {}
    // Get public key of system
    rpc PublicKey(NamespaceServicePublicKeyRequest) returns (NamespaceServicePublicKeyResponse) {}
  }

// The request of a Namespace.Ping RPC
message NamespaceServicePingRequest {}

// The request of a Namespace.Ping RPC
message NamespaceServicePingResponse {}

// The request of a Namespace.Create RPC
message NamespaceServiceCreateRequest {
    // The id of the namespace
    string namespace = 1;
    // The name of the namespace
    string name = 2;
    // The logo of the namespace
    string logo = 3;
    // The supported login mechanisms
    repeated LoginType login_mechanisms = 4;
    // Email provider
    EmailProvider email_provider = 5;
    // Text provider
    TextProvider text_provider = 6;
}

// The response of a Namespace.Create RPC
message NamespaceServiceCreateResponse {
    Namespace namespace = 1;
}

// The request of a Namespace.Delete RPC
message NamespaceServiceDeleteRequest {
    // The id of the namespace
    string namespace = 1;
}

// The response of a Namespace.Delete RPC
message NamespaceServiceDeleteResponse {}

// The request of a Namespace.Update RPC
message NamespaceServiceUpdateRequest {
    // The id of the namespace
    string namespace = 1;
    // The name of the namespace
    optional string name = 2;
    // The logo of the namespace
    optional string image = 3;
}

// The response of a Namespace.Update RPC
message NamespaceServiceUpdateResponse {}


// The request of a Namespace.Get RPC
message NamespaceServiceGetRequest {
    // The id of the namespace
    string namespace = 1;
}

// The response of a Namespace.Get RPC
message NamespaceServiceGetResponse {
    Namespace namespace = 1;
    string redirect_addr = 2;
}

// The request of a Namespace.PublicKey RPC
message NamespaceServicePublicKeyRequest {
    // The id of the namespace
    string namespace = 1;
}

// The response of a Namespace.PublicKey RPC
message NamespaceServicePublicKeyResponse {
    // The id of the namespace
    string public_key = 1;
    // The id of the namespace
    string namespace = 2;
}

// The request of a Namespace.UpdateEmailProvider RPC
message NamespaceServiceUpdateEmailProviderRequest {
    EmailProviderType type = 1;
    string public_key = 2;
    string private_key = 3;
    string from = 4;
    string namespace = 5;
}

// The response of a Namespace.UpdateEmailProvider RPC
message NamespaceServiceUpdateEmailProviderResponse {}


// The request of a Namespace.UpdateTextProvider RPC
message NamespaceServiceUpdateTextProviderRequest {
    TextProviderType type = 1;
    string public_key = 2;
    string private_key = 3;
    string from = 4;
    string namespace = 5;
}

// The response of a Namespace.UpdateEmailProvider RPC
message NamespaceServiceUpdateTextProviderResponse {}

// The request of a Authentication.UpdateOAuth2Provider RPC
message NamespaceServiceUpdateOAuth2ProviderRequest {
    // The namespace to perform action in
    string namespace = 1;
    // The public key of the provider
    string public_key = 2;
    // The public key of the provider
    string private_key = 3;
    // The type of provider
    OAuthProviderType provider = 4;
    // If the provider is enabled or not
    bool enabled = 5;
}

// The response of a Authentication.UpdateOAuth2Provider RPC
message NamespaceServiceUpdateOAuth2ProviderResponse {}

// The request of a Authentication.UpdateCallbacks RPC
message NamespaceServiceUpdateCallbacksRequest {
    // The callbacks to be updated
    repeated string callbacks = 1;
    // The namespace to perform action in
    string namespace = 2;
}

// The response of a Authentication.UpdateOAuth2Provider RPC
message NamespaceServiceUpdateCallbacksResponse {}

// The request of a Authentication.UpdateHashingAlgorithm RPC
message NamespaceServiceUpdateHashingAlgorithmRequest {
    // The hashing algorithm to use as default
    HashingAlgorithm algorithm = 1;
    // The Bcrypt values to update
    Bcrypt bcrypt = 2;
    // The Scrypt values to update
    Scrypt scrypt = 3;
    // The namespace to perform action in
    string namespace = 4;
}

// The response of a Authentication.UpdateHashingAlgorithm RPC
message NamespaceServiceUpdateHashingAlgorithmResponse {}

// The request of a Authentication.UpdateLoginMechanisms RPC
message NamespaceServiceUpdateLoginSettingsRequest {
    // Array of supported login types
    repeated LoginType supported_login_mechanisms = 1;  
    // The namespace to perform action in
    string namespace = 2;
    // to enable/disable singup
    optional bool enable_signup = 3;
    // to enable/disable login
    optional bool enable_login = 4;
    // to enable/disable password validation
    optional bool validate_password = 5;
}

// The request of a Authentication.UpdateLoginMechanisms RPC
message NamespaceServiceUpdateLoginSettingsResponse {}

// The request of a Authentication.UpdateTokenSettings RPC
message NamespaceServiceUpdateTokenSettingsRequest {
    // Defines for how long the access token lives
    int32 access_token_ttl = 1;
    // Defines for how long the access refresh lives
    int32 refresh_token_ttl = 2;
    // Defines for how long the verification code is valid
    int32 verification_code_ttl = 3;
    // The namespace to perform action in
    string namespace = 4;
}

// The response of a Authentication.UpdateTokenSettings RPC
message NamespaceServiceUpdateTokenSettingsResponse {}

// The request of a Authentication.UpdateTemplate RPC
message NamespaceServiceUpdateTemplateRequest {
    // The template to update
    Template template = 1;
    // The namespace to perform action in
    string namespace = 2;
}

// The response of a Authentication.UpdateTemplate RPC
message NamespaceServiceUpdateTemplateResponse {}
