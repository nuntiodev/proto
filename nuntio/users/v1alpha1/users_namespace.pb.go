// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: nuntio/users/v1alpha1/users_namespace.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request of a Namespace.Ping RPC
type NamespaceServicePingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServicePingRequest) Reset() {
	*x = NamespaceServicePingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServicePingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServicePingRequest) ProtoMessage() {}

func (x *NamespaceServicePingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServicePingRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServicePingRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{0}
}

// The request of a Namespace.Ping RPC
type NamespaceServicePingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServicePingResponse) Reset() {
	*x = NamespaceServicePingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServicePingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServicePingResponse) ProtoMessage() {}

func (x *NamespaceServicePingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServicePingResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServicePingResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{1}
}

// The request of a Namespace.Create RPC
type NamespaceServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the namespace
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The logo of the namespace
	Logo string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	// The supported login mechanisms
	LoginMechanisms []LoginType `protobuf:"varint,4,rep,packed,name=login_mechanisms,json=loginMechanisms,proto3,enum=nuntio.users.v1alpha1.LoginType" json:"login_mechanisms,omitempty"`
	// Email provider
	EmailProvider *EmailProvider `protobuf:"bytes,5,opt,name=email_provider,json=emailProvider,proto3" json:"email_provider,omitempty"`
	// Text provider
	TextProvider *TextProvider `protobuf:"bytes,6,opt,name=text_provider,json=textProvider,proto3" json:"text_provider,omitempty"`
}

func (x *NamespaceServiceCreateRequest) Reset() {
	*x = NamespaceServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceCreateRequest) ProtoMessage() {}

func (x *NamespaceServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{2}
}

func (x *NamespaceServiceCreateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceServiceCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *NamespaceServiceCreateRequest) GetLoginMechanisms() []LoginType {
	if x != nil {
		return x.LoginMechanisms
	}
	return nil
}

func (x *NamespaceServiceCreateRequest) GetEmailProvider() *EmailProvider {
	if x != nil {
		return x.EmailProvider
	}
	return nil
}

func (x *NamespaceServiceCreateRequest) GetTextProvider() *TextProvider {
	if x != nil {
		return x.TextProvider
	}
	return nil
}

// The response of a Namespace.Create RPC
type NamespaceServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceCreateResponse) Reset() {
	*x = NamespaceServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceCreateResponse) ProtoMessage() {}

func (x *NamespaceServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{3}
}

func (x *NamespaceServiceCreateResponse) GetNamespace() *Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// The request of a Namespace.Delete RPC
type NamespaceServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceDeleteRequest) Reset() {
	*x = NamespaceServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceDeleteRequest) ProtoMessage() {}

func (x *NamespaceServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceServiceDeleteRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Namespace.Delete RPC
type NamespaceServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceDeleteResponse) Reset() {
	*x = NamespaceServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceDeleteResponse) ProtoMessage() {}

func (x *NamespaceServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{5}
}

// The request of a Namespace.Update RPC
type NamespaceServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the namespace
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The logo of the namespace
	Image *string `protobuf:"bytes,3,opt,name=image,proto3,oneof" json:"image,omitempty"`
}

func (x *NamespaceServiceUpdateRequest) Reset() {
	*x = NamespaceServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{6}
}

func (x *NamespaceServiceUpdateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceServiceUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamespaceServiceUpdateRequest) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

// The response of a Namespace.Update RPC
type NamespaceServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateResponse) Reset() {
	*x = NamespaceServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{7}
}

// The request of a Namespace.Get RPC
type NamespaceServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceGetRequest) Reset() {
	*x = NamespaceServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceGetRequest) ProtoMessage() {}

func (x *NamespaceServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceGetRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{8}
}

func (x *NamespaceServiceGetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Namespace.Get RPC
type NamespaceServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RedirectAddr string     `protobuf:"bytes,2,opt,name=redirect_addr,json=redirectAddr,proto3" json:"redirect_addr,omitempty"`
}

func (x *NamespaceServiceGetResponse) Reset() {
	*x = NamespaceServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceGetResponse) ProtoMessage() {}

func (x *NamespaceServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceGetResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{9}
}

func (x *NamespaceServiceGetResponse) GetNamespace() *Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *NamespaceServiceGetResponse) GetRedirectAddr() string {
	if x != nil {
		return x.RedirectAddr
	}
	return ""
}

// The request of a Namespace.PublicKey RPC
type NamespaceServicePublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServicePublicKeyRequest) Reset() {
	*x = NamespaceServicePublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServicePublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServicePublicKeyRequest) ProtoMessage() {}

func (x *NamespaceServicePublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServicePublicKeyRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServicePublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{10}
}

func (x *NamespaceServicePublicKeyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Namespace.PublicKey RPC
type NamespaceServicePublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the namespace
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The id of the namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServicePublicKeyResponse) Reset() {
	*x = NamespaceServicePublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServicePublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServicePublicKeyResponse) ProtoMessage() {}

func (x *NamespaceServicePublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServicePublicKeyResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServicePublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{11}
}

func (x *NamespaceServicePublicKeyResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NamespaceServicePublicKeyResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The request of a Namespace.UpdateEmailProvider RPC
type NamespaceServiceUpdateEmailProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       EmailProviderType `protobuf:"varint,1,opt,name=type,proto3,enum=nuntio.users.v1alpha1.EmailProviderType" json:"type,omitempty"`
	PublicKey  string            `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string            `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	From       string            `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Namespace  string            `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateEmailProviderRequest) Reset() {
	*x = NamespaceServiceUpdateEmailProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateEmailProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateEmailProviderRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateEmailProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateEmailProviderRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateEmailProviderRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{12}
}

func (x *NamespaceServiceUpdateEmailProviderRequest) GetType() EmailProviderType {
	if x != nil {
		return x.Type
	}
	return EmailProviderType_EMAIL_PROVIDER_TYPE_UNSPECIFIED
}

func (x *NamespaceServiceUpdateEmailProviderRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NamespaceServiceUpdateEmailProviderRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *NamespaceServiceUpdateEmailProviderRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *NamespaceServiceUpdateEmailProviderRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Namespace.UpdateEmailProvider RPC
type NamespaceServiceUpdateEmailProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateEmailProviderResponse) Reset() {
	*x = NamespaceServiceUpdateEmailProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateEmailProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateEmailProviderResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateEmailProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateEmailProviderResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateEmailProviderResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{13}
}

// The request of a Namespace.UpdateTextProvider RPC
type NamespaceServiceUpdateTextProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       TextProviderType `protobuf:"varint,1,opt,name=type,proto3,enum=nuntio.users.v1alpha1.TextProviderType" json:"type,omitempty"`
	PublicKey  string           `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string           `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	From       string           `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Namespace  string           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateTextProviderRequest) Reset() {
	*x = NamespaceServiceUpdateTextProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTextProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTextProviderRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateTextProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTextProviderRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTextProviderRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{14}
}

func (x *NamespaceServiceUpdateTextProviderRequest) GetType() TextProviderType {
	if x != nil {
		return x.Type
	}
	return TextProviderType_TEXT_PROVIDER_TYPE_UNSPECIFIED
}

func (x *NamespaceServiceUpdateTextProviderRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NamespaceServiceUpdateTextProviderRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *NamespaceServiceUpdateTextProviderRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *NamespaceServiceUpdateTextProviderRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Namespace.UpdateEmailProvider RPC
type NamespaceServiceUpdateTextProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateTextProviderResponse) Reset() {
	*x = NamespaceServiceUpdateTextProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTextProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTextProviderResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateTextProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTextProviderResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTextProviderResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{15}
}

// The request of a Authentication.UpdateOAuth2Provider RPC
type NamespaceServiceUpdateOAuth2ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace to perform action in
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The public key of the provider
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The public key of the provider
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// The type of provider
	Provider OAuthProviderType `protobuf:"varint,4,opt,name=provider,proto3,enum=nuntio.users.v1alpha1.OAuthProviderType" json:"provider,omitempty"`
	// If the provider is enabled or not
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) Reset() {
	*x = NamespaceServiceUpdateOAuth2ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateOAuth2ProviderRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateOAuth2ProviderRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateOAuth2ProviderRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{16}
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) GetProvider() OAuthProviderType {
	if x != nil {
		return x.Provider
	}
	return OAuthProviderType_OAUTH_PROVIDER_TYPE_UNSPECIFIED
}

func (x *NamespaceServiceUpdateOAuth2ProviderRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// The response of a Authentication.UpdateOAuth2Provider RPC
type NamespaceServiceUpdateOAuth2ProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateOAuth2ProviderResponse) Reset() {
	*x = NamespaceServiceUpdateOAuth2ProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateOAuth2ProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateOAuth2ProviderResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateOAuth2ProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateOAuth2ProviderResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateOAuth2ProviderResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{17}
}

// The request of a Authentication.UpdateCallbacks RPC
type NamespaceServiceUpdateCallbacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The callbacks to be updated
	Callbacks []string `protobuf:"bytes,1,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
	// The namespace to perform action in
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateCallbacksRequest) Reset() {
	*x = NamespaceServiceUpdateCallbacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateCallbacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateCallbacksRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateCallbacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateCallbacksRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateCallbacksRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{18}
}

func (x *NamespaceServiceUpdateCallbacksRequest) GetCallbacks() []string {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *NamespaceServiceUpdateCallbacksRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Authentication.UpdateOAuth2Provider RPC
type NamespaceServiceUpdateCallbacksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateCallbacksResponse) Reset() {
	*x = NamespaceServiceUpdateCallbacksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateCallbacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateCallbacksResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateCallbacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateCallbacksResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateCallbacksResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{19}
}

// The request of a Authentication.UpdateHashingAlgorithm RPC
type NamespaceServiceUpdateHashingAlgorithmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hashing algorithm to use as default
	Algorithm HashingAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=nuntio.users.v1alpha1.HashingAlgorithm" json:"algorithm,omitempty"`
	// The Bcrypt values to update
	Bcrypt *Bcrypt `protobuf:"bytes,2,opt,name=bcrypt,proto3" json:"bcrypt,omitempty"`
	// The Scrypt values to update
	Scrypt *Scrypt `protobuf:"bytes,3,opt,name=scrypt,proto3" json:"scrypt,omitempty"`
	// The namespace to perform action in
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) Reset() {
	*x = NamespaceServiceUpdateHashingAlgorithmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateHashingAlgorithmRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateHashingAlgorithmRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateHashingAlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{20}
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) GetAlgorithm() HashingAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return HashingAlgorithm_HASHING_ALGORITHM_UNSPECIFIED
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) GetBcrypt() *Bcrypt {
	if x != nil {
		return x.Bcrypt
	}
	return nil
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) GetScrypt() *Scrypt {
	if x != nil {
		return x.Scrypt
	}
	return nil
}

func (x *NamespaceServiceUpdateHashingAlgorithmRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Authentication.UpdateHashingAlgorithm RPC
type NamespaceServiceUpdateHashingAlgorithmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateHashingAlgorithmResponse) Reset() {
	*x = NamespaceServiceUpdateHashingAlgorithmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateHashingAlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateHashingAlgorithmResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateHashingAlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateHashingAlgorithmResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateHashingAlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{21}
}

// The request of a Authentication.UpdateLoginMechanisms RPC
type NamespaceServiceUpdateLoginSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of supported login types
	LoginMechanisms []LoginType `protobuf:"varint,1,rep,packed,name=login_mechanisms,json=loginMechanisms,proto3,enum=nuntio.users.v1alpha1.LoginType" json:"login_mechanisms,omitempty"`
	// The namespace to perform action in
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// to enable/disable singup
	EnableSignup *bool `protobuf:"varint,3,opt,name=enable_signup,json=enableSignup,proto3,oneof" json:"enable_signup,omitempty"`
	// to enable/disable login
	EnableLogin *bool `protobuf:"varint,4,opt,name=enable_login,json=enableLogin,proto3,oneof" json:"enable_login,omitempty"`
	// to enable/disable password validation
	ValidatePassword *bool `protobuf:"varint,5,opt,name=validate_password,json=validatePassword,proto3,oneof" json:"validate_password,omitempty"`
	// will enable verification of emails before issuing tokens
	VerifyEmail *bool `protobuf:"varint,6,opt,name=verify_email,json=verifyEmail,proto3,oneof" json:"verify_email,omitempty"`
	// will enable phone number verifications before issuing tokens
	VerifyPhoneNumber *bool `protobuf:"varint,7,opt,name=verify_phone_number,json=verifyPhoneNumber,proto3,oneof" json:"verify_phone_number,omitempty"`
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) Reset() {
	*x = NamespaceServiceUpdateLoginSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateLoginSettingsRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateLoginSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateLoginSettingsRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateLoginSettingsRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{22}
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetLoginMechanisms() []LoginType {
	if x != nil {
		return x.LoginMechanisms
	}
	return nil
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetEnableSignup() bool {
	if x != nil && x.EnableSignup != nil {
		return *x.EnableSignup
	}
	return false
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetEnableLogin() bool {
	if x != nil && x.EnableLogin != nil {
		return *x.EnableLogin
	}
	return false
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetValidatePassword() bool {
	if x != nil && x.ValidatePassword != nil {
		return *x.ValidatePassword
	}
	return false
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetVerifyEmail() bool {
	if x != nil && x.VerifyEmail != nil {
		return *x.VerifyEmail
	}
	return false
}

func (x *NamespaceServiceUpdateLoginSettingsRequest) GetVerifyPhoneNumber() bool {
	if x != nil && x.VerifyPhoneNumber != nil {
		return *x.VerifyPhoneNumber
	}
	return false
}

// The request of a Authentication.UpdateLoginMechanisms RPC
type NamespaceServiceUpdateLoginSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateLoginSettingsResponse) Reset() {
	*x = NamespaceServiceUpdateLoginSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateLoginSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateLoginSettingsResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateLoginSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateLoginSettingsResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateLoginSettingsResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{23}
}

// The request of a Authentication.UpdateTokenSettings RPC
type NamespaceServiceUpdateTokenSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines for how long the access token lives
	AccessTokenTtl int32 `protobuf:"varint,1,opt,name=access_token_ttl,json=accessTokenTtl,proto3" json:"access_token_ttl,omitempty"`
	// Defines for how long the access refresh lives
	RefreshTokenTtl int32 `protobuf:"varint,2,opt,name=refresh_token_ttl,json=refreshTokenTtl,proto3" json:"refresh_token_ttl,omitempty"`
	// Defines for how long the verification code is valid
	VerificationCodeTtl int32 `protobuf:"varint,3,opt,name=verification_code_ttl,json=verificationCodeTtl,proto3" json:"verification_code_ttl,omitempty"`
	// The namespace to perform action in
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) Reset() {
	*x = NamespaceServiceUpdateTokenSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTokenSettingsRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateTokenSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTokenSettingsRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTokenSettingsRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{24}
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) GetAccessTokenTtl() int32 {
	if x != nil {
		return x.AccessTokenTtl
	}
	return 0
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) GetRefreshTokenTtl() int32 {
	if x != nil {
		return x.RefreshTokenTtl
	}
	return 0
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) GetVerificationCodeTtl() int32 {
	if x != nil {
		return x.VerificationCodeTtl
	}
	return 0
}

func (x *NamespaceServiceUpdateTokenSettingsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Authentication.UpdateTokenSettings RPC
type NamespaceServiceUpdateTokenSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateTokenSettingsResponse) Reset() {
	*x = NamespaceServiceUpdateTokenSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTokenSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTokenSettingsResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateTokenSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTokenSettingsResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTokenSettingsResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{25}
}

// The request of a Authentication.UpdateTemplate RPC
type NamespaceServiceUpdateTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The template to update
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// The namespace to perform action in
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespaceServiceUpdateTemplateRequest) Reset() {
	*x = NamespaceServiceUpdateTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTemplateRequest) ProtoMessage() {}

func (x *NamespaceServiceUpdateTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTemplateRequest.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTemplateRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{26}
}

func (x *NamespaceServiceUpdateTemplateRequest) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *NamespaceServiceUpdateTemplateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response of a Authentication.UpdateTemplate RPC
type NamespaceServiceUpdateTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceServiceUpdateTemplateResponse) Reset() {
	*x = NamespaceServiceUpdateTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceServiceUpdateTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceServiceUpdateTemplateResponse) ProtoMessage() {}

func (x *NamespaceServiceUpdateTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceServiceUpdateTemplateResponse.ProtoReflect.Descriptor instead.
func (*NamespaceServiceUpdateTemplateResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP(), []int{27}
}

var File_nuntio_users_v1alpha1_users_namespace_proto protoreflect.FileDescriptor

var file_nuntio_users_v1alpha1_users_namespace_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x2a, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x1e, 0x0a, 0x1c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc9, 0x02, 0x0a, 0x1d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x74,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x1e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3d, 0x0a,
	0x1d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x1d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x40, 0x0a, 0x20, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x21, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xdc, 0x01, 0x0a,
	0x2a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x29, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x2a, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x2b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x26, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x35, 0x0a,
	0x06, 0x62, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x06, 0x62, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x2a,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x2b, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x2a, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x74, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2d,
	0x0a, 0x2b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x25, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd9, 0x0f, 0x0a,
	0x10, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x71, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e,
	0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9e, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x41, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6e, 0x75, 0x6e,
	0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9b, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6e, 0x75,
	0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x44, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x2e, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x2e, 0x6e, 0x75, 0x6e,
	0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x37, 0x2e, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x62, 0x0a, 0x15, 0x6e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x50, 0x01, 0x5a, 0x17, 0x2e, 0x2f, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xaa, 0x02, 0x15, 0x6e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x15, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x5c, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x5c, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nuntio_users_v1alpha1_users_namespace_proto_rawDescOnce sync.Once
	file_nuntio_users_v1alpha1_users_namespace_proto_rawDescData = file_nuntio_users_v1alpha1_users_namespace_proto_rawDesc
)

func file_nuntio_users_v1alpha1_users_namespace_proto_rawDescGZIP() []byte {
	file_nuntio_users_v1alpha1_users_namespace_proto_rawDescOnce.Do(func() {
		file_nuntio_users_v1alpha1_users_namespace_proto_rawDescData = protoimpl.X.CompressGZIP(file_nuntio_users_v1alpha1_users_namespace_proto_rawDescData)
	})
	return file_nuntio_users_v1alpha1_users_namespace_proto_rawDescData
}

var file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_nuntio_users_v1alpha1_users_namespace_proto_goTypes = []interface{}{
	(*NamespaceServicePingRequest)(nil),                    // 0: nuntio.users.v1alpha1.NamespaceServicePingRequest
	(*NamespaceServicePingResponse)(nil),                   // 1: nuntio.users.v1alpha1.NamespaceServicePingResponse
	(*NamespaceServiceCreateRequest)(nil),                  // 2: nuntio.users.v1alpha1.NamespaceServiceCreateRequest
	(*NamespaceServiceCreateResponse)(nil),                 // 3: nuntio.users.v1alpha1.NamespaceServiceCreateResponse
	(*NamespaceServiceDeleteRequest)(nil),                  // 4: nuntio.users.v1alpha1.NamespaceServiceDeleteRequest
	(*NamespaceServiceDeleteResponse)(nil),                 // 5: nuntio.users.v1alpha1.NamespaceServiceDeleteResponse
	(*NamespaceServiceUpdateRequest)(nil),                  // 6: nuntio.users.v1alpha1.NamespaceServiceUpdateRequest
	(*NamespaceServiceUpdateResponse)(nil),                 // 7: nuntio.users.v1alpha1.NamespaceServiceUpdateResponse
	(*NamespaceServiceGetRequest)(nil),                     // 8: nuntio.users.v1alpha1.NamespaceServiceGetRequest
	(*NamespaceServiceGetResponse)(nil),                    // 9: nuntio.users.v1alpha1.NamespaceServiceGetResponse
	(*NamespaceServicePublicKeyRequest)(nil),               // 10: nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest
	(*NamespaceServicePublicKeyResponse)(nil),              // 11: nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse
	(*NamespaceServiceUpdateEmailProviderRequest)(nil),     // 12: nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest
	(*NamespaceServiceUpdateEmailProviderResponse)(nil),    // 13: nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse
	(*NamespaceServiceUpdateTextProviderRequest)(nil),      // 14: nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest
	(*NamespaceServiceUpdateTextProviderResponse)(nil),     // 15: nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse
	(*NamespaceServiceUpdateOAuth2ProviderRequest)(nil),    // 16: nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest
	(*NamespaceServiceUpdateOAuth2ProviderResponse)(nil),   // 17: nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse
	(*NamespaceServiceUpdateCallbacksRequest)(nil),         // 18: nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest
	(*NamespaceServiceUpdateCallbacksResponse)(nil),        // 19: nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse
	(*NamespaceServiceUpdateHashingAlgorithmRequest)(nil),  // 20: nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest
	(*NamespaceServiceUpdateHashingAlgorithmResponse)(nil), // 21: nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse
	(*NamespaceServiceUpdateLoginSettingsRequest)(nil),     // 22: nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest
	(*NamespaceServiceUpdateLoginSettingsResponse)(nil),    // 23: nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse
	(*NamespaceServiceUpdateTokenSettingsRequest)(nil),     // 24: nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest
	(*NamespaceServiceUpdateTokenSettingsResponse)(nil),    // 25: nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse
	(*NamespaceServiceUpdateTemplateRequest)(nil),          // 26: nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest
	(*NamespaceServiceUpdateTemplateResponse)(nil),         // 27: nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse
	(LoginType)(0),         // 28: nuntio.users.v1alpha1.LoginType
	(*EmailProvider)(nil),  // 29: nuntio.users.v1alpha1.EmailProvider
	(*TextProvider)(nil),   // 30: nuntio.users.v1alpha1.TextProvider
	(*Namespace)(nil),      // 31: nuntio.users.v1alpha1.Namespace
	(EmailProviderType)(0), // 32: nuntio.users.v1alpha1.EmailProviderType
	(TextProviderType)(0),  // 33: nuntio.users.v1alpha1.TextProviderType
	(OAuthProviderType)(0), // 34: nuntio.users.v1alpha1.OAuthProviderType
	(HashingAlgorithm)(0),  // 35: nuntio.users.v1alpha1.HashingAlgorithm
	(*Bcrypt)(nil),         // 36: nuntio.users.v1alpha1.Bcrypt
	(*Scrypt)(nil),         // 37: nuntio.users.v1alpha1.Scrypt
	(*Template)(nil),       // 38: nuntio.users.v1alpha1.Template
}
var file_nuntio_users_v1alpha1_users_namespace_proto_depIdxs = []int32{
	28, // 0: nuntio.users.v1alpha1.NamespaceServiceCreateRequest.login_mechanisms:type_name -> nuntio.users.v1alpha1.LoginType
	29, // 1: nuntio.users.v1alpha1.NamespaceServiceCreateRequest.email_provider:type_name -> nuntio.users.v1alpha1.EmailProvider
	30, // 2: nuntio.users.v1alpha1.NamespaceServiceCreateRequest.text_provider:type_name -> nuntio.users.v1alpha1.TextProvider
	31, // 3: nuntio.users.v1alpha1.NamespaceServiceCreateResponse.namespace:type_name -> nuntio.users.v1alpha1.Namespace
	31, // 4: nuntio.users.v1alpha1.NamespaceServiceGetResponse.namespace:type_name -> nuntio.users.v1alpha1.Namespace
	32, // 5: nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest.type:type_name -> nuntio.users.v1alpha1.EmailProviderType
	33, // 6: nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest.type:type_name -> nuntio.users.v1alpha1.TextProviderType
	34, // 7: nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest.provider:type_name -> nuntio.users.v1alpha1.OAuthProviderType
	35, // 8: nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.algorithm:type_name -> nuntio.users.v1alpha1.HashingAlgorithm
	36, // 9: nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.bcrypt:type_name -> nuntio.users.v1alpha1.Bcrypt
	37, // 10: nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest.scrypt:type_name -> nuntio.users.v1alpha1.Scrypt
	28, // 11: nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest.login_mechanisms:type_name -> nuntio.users.v1alpha1.LoginType
	38, // 12: nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest.template:type_name -> nuntio.users.v1alpha1.Template
	0,  // 13: nuntio.users.v1alpha1.NamespaceService.Ping:input_type -> nuntio.users.v1alpha1.NamespaceServicePingRequest
	2,  // 14: nuntio.users.v1alpha1.NamespaceService.Create:input_type -> nuntio.users.v1alpha1.NamespaceServiceCreateRequest
	4,  // 15: nuntio.users.v1alpha1.NamespaceService.Delete:input_type -> nuntio.users.v1alpha1.NamespaceServiceDeleteRequest
	8,  // 16: nuntio.users.v1alpha1.NamespaceService.Get:input_type -> nuntio.users.v1alpha1.NamespaceServiceGetRequest
	6,  // 17: nuntio.users.v1alpha1.NamespaceService.Update:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateRequest
	12, // 18: nuntio.users.v1alpha1.NamespaceService.UpdateEmailProvider:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderRequest
	14, // 19: nuntio.users.v1alpha1.NamespaceService.UpdateTextProvider:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderRequest
	16, // 20: nuntio.users.v1alpha1.NamespaceService.UpdateOAuth2Provider:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderRequest
	18, // 21: nuntio.users.v1alpha1.NamespaceService.UpdateCallbacks:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksRequest
	20, // 22: nuntio.users.v1alpha1.NamespaceService.UpdateHashingAlgorithm:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmRequest
	22, // 23: nuntio.users.v1alpha1.NamespaceService.UpdateLoginSettings:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsRequest
	24, // 24: nuntio.users.v1alpha1.NamespaceService.UpdateTokenSettings:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsRequest
	26, // 25: nuntio.users.v1alpha1.NamespaceService.UpdateTemplate:input_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateRequest
	10, // 26: nuntio.users.v1alpha1.NamespaceService.PublicKey:input_type -> nuntio.users.v1alpha1.NamespaceServicePublicKeyRequest
	1,  // 27: nuntio.users.v1alpha1.NamespaceService.Ping:output_type -> nuntio.users.v1alpha1.NamespaceServicePingResponse
	3,  // 28: nuntio.users.v1alpha1.NamespaceService.Create:output_type -> nuntio.users.v1alpha1.NamespaceServiceCreateResponse
	5,  // 29: nuntio.users.v1alpha1.NamespaceService.Delete:output_type -> nuntio.users.v1alpha1.NamespaceServiceDeleteResponse
	9,  // 30: nuntio.users.v1alpha1.NamespaceService.Get:output_type -> nuntio.users.v1alpha1.NamespaceServiceGetResponse
	7,  // 31: nuntio.users.v1alpha1.NamespaceService.Update:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateResponse
	13, // 32: nuntio.users.v1alpha1.NamespaceService.UpdateEmailProvider:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateEmailProviderResponse
	15, // 33: nuntio.users.v1alpha1.NamespaceService.UpdateTextProvider:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTextProviderResponse
	17, // 34: nuntio.users.v1alpha1.NamespaceService.UpdateOAuth2Provider:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateOAuth2ProviderResponse
	19, // 35: nuntio.users.v1alpha1.NamespaceService.UpdateCallbacks:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateCallbacksResponse
	21, // 36: nuntio.users.v1alpha1.NamespaceService.UpdateHashingAlgorithm:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateHashingAlgorithmResponse
	23, // 37: nuntio.users.v1alpha1.NamespaceService.UpdateLoginSettings:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateLoginSettingsResponse
	25, // 38: nuntio.users.v1alpha1.NamespaceService.UpdateTokenSettings:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTokenSettingsResponse
	27, // 39: nuntio.users.v1alpha1.NamespaceService.UpdateTemplate:output_type -> nuntio.users.v1alpha1.NamespaceServiceUpdateTemplateResponse
	11, // 40: nuntio.users.v1alpha1.NamespaceService.PublicKey:output_type -> nuntio.users.v1alpha1.NamespaceServicePublicKeyResponse
	27, // [27:41] is the sub-list for method output_type
	13, // [13:27] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_nuntio_users_v1alpha1_users_namespace_proto_init() }
func file_nuntio_users_v1alpha1_users_namespace_proto_init() {
	if File_nuntio_users_v1alpha1_users_namespace_proto != nil {
		return
	}
	file_nuntio_users_v1alpha1_users_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServicePingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServicePingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServicePublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServicePublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateEmailProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateEmailProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTextProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTextProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateOAuth2ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateOAuth2ProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateCallbacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateCallbacksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateHashingAlgorithmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateHashingAlgorithmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateLoginSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateLoginSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTokenSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTokenSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceServiceUpdateTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nuntio_users_v1alpha1_users_namespace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nuntio_users_v1alpha1_users_namespace_proto_goTypes,
		DependencyIndexes: file_nuntio_users_v1alpha1_users_namespace_proto_depIdxs,
		MessageInfos:      file_nuntio_users_v1alpha1_users_namespace_proto_msgTypes,
	}.Build()
	File_nuntio_users_v1alpha1_users_namespace_proto = out.File
	file_nuntio_users_v1alpha1_users_namespace_proto_rawDesc = nil
	file_nuntio_users_v1alpha1_users_namespace_proto_goTypes = nil
	file_nuntio_users_v1alpha1_users_namespace_proto_depIdxs = nil
}
