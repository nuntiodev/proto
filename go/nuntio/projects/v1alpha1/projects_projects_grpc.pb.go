// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_projects.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsServiceClient is the client API for ProjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServiceClient interface {
	// Ping returns an empty response used to check if the server is live
	Ping(ctx context.Context, in *ProjectsServicePingRequest, opts ...grpc.CallOption) (*ProjectsServicePingResponse, error)
	// Create initializes a new project and all relating ressources
	Create(ctx context.Context, in *ProjectsServiceCreateRequest, opts ...grpc.CallOption) (*ProjectsServiceCreateResponse, error)
	// Deletes deletes a project and all its ressources
	Delete(ctx context.Context, in *ProjectsServiceDeleteRequest, opts ...grpc.CallOption) (*ProjectsServiceDeleteResponse, error)
	// Update updates a project with a new name, logo etc.
	Update(ctx context.Context, in *ProjectsServiceUpdateRequest, opts ...grpc.CallOption) (*ProjectsServiceUpdateResponse, error)
	// Get fetches a speicfic project
	Get(ctx context.Context, in *ProjectsServiceGetRequest, opts ...grpc.CallOption) (*ProjectsServiceGetResponse, error)
	// List returns a list of projects
	List(ctx context.Context, in *ProjectsServiceListRequest, opts ...grpc.CallOption) (*ProjectsServiceListResponse, error)
	// Enables storage for the project
	EnableStorage(ctx context.Context, in *ProjectsServiceEnableStorageRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableStorageResponse, error)
	// Disables storage for the project
	DisableStorage(ctx context.Context, in *ProjectsServiceDisableStorageRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableStorageResponse, error)
	// Enables USers for the project
	EnableUsers(ctx context.Context, in *ProjectsServiceEnableUsersRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableUsersResponse, error)
	// Disables Users for the project
	DisableUsers(ctx context.Context, in *ProjectsServiceDisableUsersRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableUsersResponse, error)
	// Enables Mongo for the project
	EnableMongo(ctx context.Context, in *ProjectsServiceEnableMongoRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableMongoResponse, error)
	// Disables Mongo for the project
	DisableMongo(ctx context.Context, in *ProjectsServiceDisableMongoRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableMongoResponse, error)
	// Enables Postgres for the project
	EnablePostgres(ctx context.Context, in *ProjectsServiceEnablePostgresRequest, opts ...grpc.CallOption) (*ProjectsServiceEnablePostgresResponse, error)
	// Disable Postgres for the project
	DisablePostgres(ctx context.Context, in *ProjectsServiceDisablePostgresRequest, opts ...grpc.CallOption) (*ProjectsServiceDisablePostgresResponse, error)
	// Returns the public key for the service
	PublicKey(ctx context.Context, in *ProjectsServicePublicKeyRequest, opts ...grpc.CallOption) (*ProjectsServicePublicKeyResponse, error)
}

type projectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServiceClient(cc grpc.ClientConnInterface) ProjectsServiceClient {
	return &projectsServiceClient{cc}
}

func (c *projectsServiceClient) Ping(ctx context.Context, in *ProjectsServicePingRequest, opts ...grpc.CallOption) (*ProjectsServicePingResponse, error) {
	out := new(ProjectsServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) Create(ctx context.Context, in *ProjectsServiceCreateRequest, opts ...grpc.CallOption) (*ProjectsServiceCreateResponse, error) {
	out := new(ProjectsServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) Delete(ctx context.Context, in *ProjectsServiceDeleteRequest, opts ...grpc.CallOption) (*ProjectsServiceDeleteResponse, error) {
	out := new(ProjectsServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) Update(ctx context.Context, in *ProjectsServiceUpdateRequest, opts ...grpc.CallOption) (*ProjectsServiceUpdateResponse, error) {
	out := new(ProjectsServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) Get(ctx context.Context, in *ProjectsServiceGetRequest, opts ...grpc.CallOption) (*ProjectsServiceGetResponse, error) {
	out := new(ProjectsServiceGetResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) List(ctx context.Context, in *ProjectsServiceListRequest, opts ...grpc.CallOption) (*ProjectsServiceListResponse, error) {
	out := new(ProjectsServiceListResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) EnableStorage(ctx context.Context, in *ProjectsServiceEnableStorageRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableStorageResponse, error) {
	out := new(ProjectsServiceEnableStorageResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/EnableStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) DisableStorage(ctx context.Context, in *ProjectsServiceDisableStorageRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableStorageResponse, error) {
	out := new(ProjectsServiceDisableStorageResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/DisableStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) EnableUsers(ctx context.Context, in *ProjectsServiceEnableUsersRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableUsersResponse, error) {
	out := new(ProjectsServiceEnableUsersResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/EnableUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) DisableUsers(ctx context.Context, in *ProjectsServiceDisableUsersRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableUsersResponse, error) {
	out := new(ProjectsServiceDisableUsersResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/DisableUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) EnableMongo(ctx context.Context, in *ProjectsServiceEnableMongoRequest, opts ...grpc.CallOption) (*ProjectsServiceEnableMongoResponse, error) {
	out := new(ProjectsServiceEnableMongoResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/EnableMongo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) DisableMongo(ctx context.Context, in *ProjectsServiceDisableMongoRequest, opts ...grpc.CallOption) (*ProjectsServiceDisableMongoResponse, error) {
	out := new(ProjectsServiceDisableMongoResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/DisableMongo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) EnablePostgres(ctx context.Context, in *ProjectsServiceEnablePostgresRequest, opts ...grpc.CallOption) (*ProjectsServiceEnablePostgresResponse, error) {
	out := new(ProjectsServiceEnablePostgresResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/EnablePostgres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) DisablePostgres(ctx context.Context, in *ProjectsServiceDisablePostgresRequest, opts ...grpc.CallOption) (*ProjectsServiceDisablePostgresResponse, error) {
	out := new(ProjectsServiceDisablePostgresResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/DisablePostgres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) PublicKey(ctx context.Context, in *ProjectsServicePublicKeyRequest, opts ...grpc.CallOption) (*ProjectsServicePublicKeyResponse, error) {
	out := new(ProjectsServicePublicKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.ProjectsService/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServiceServer is the server API for ProjectsService service.
// All implementations should embed UnimplementedProjectsServiceServer
// for forward compatibility
type ProjectsServiceServer interface {
	// Ping returns an empty response used to check if the server is live
	Ping(context.Context, *ProjectsServicePingRequest) (*ProjectsServicePingResponse, error)
	// Create initializes a new project and all relating ressources
	Create(context.Context, *ProjectsServiceCreateRequest) (*ProjectsServiceCreateResponse, error)
	// Deletes deletes a project and all its ressources
	Delete(context.Context, *ProjectsServiceDeleteRequest) (*ProjectsServiceDeleteResponse, error)
	// Update updates a project with a new name, logo etc.
	Update(context.Context, *ProjectsServiceUpdateRequest) (*ProjectsServiceUpdateResponse, error)
	// Get fetches a speicfic project
	Get(context.Context, *ProjectsServiceGetRequest) (*ProjectsServiceGetResponse, error)
	// List returns a list of projects
	List(context.Context, *ProjectsServiceListRequest) (*ProjectsServiceListResponse, error)
	// Enables storage for the project
	EnableStorage(context.Context, *ProjectsServiceEnableStorageRequest) (*ProjectsServiceEnableStorageResponse, error)
	// Disables storage for the project
	DisableStorage(context.Context, *ProjectsServiceDisableStorageRequest) (*ProjectsServiceDisableStorageResponse, error)
	// Enables USers for the project
	EnableUsers(context.Context, *ProjectsServiceEnableUsersRequest) (*ProjectsServiceEnableUsersResponse, error)
	// Disables Users for the project
	DisableUsers(context.Context, *ProjectsServiceDisableUsersRequest) (*ProjectsServiceDisableUsersResponse, error)
	// Enables Mongo for the project
	EnableMongo(context.Context, *ProjectsServiceEnableMongoRequest) (*ProjectsServiceEnableMongoResponse, error)
	// Disables Mongo for the project
	DisableMongo(context.Context, *ProjectsServiceDisableMongoRequest) (*ProjectsServiceDisableMongoResponse, error)
	// Enables Postgres for the project
	EnablePostgres(context.Context, *ProjectsServiceEnablePostgresRequest) (*ProjectsServiceEnablePostgresResponse, error)
	// Disable Postgres for the project
	DisablePostgres(context.Context, *ProjectsServiceDisablePostgresRequest) (*ProjectsServiceDisablePostgresResponse, error)
	// Returns the public key for the service
	PublicKey(context.Context, *ProjectsServicePublicKeyRequest) (*ProjectsServicePublicKeyResponse, error)
}

// UnimplementedProjectsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectsServiceServer struct {
}

func (UnimplementedProjectsServiceServer) Ping(context.Context, *ProjectsServicePingRequest) (*ProjectsServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedProjectsServiceServer) Create(context.Context, *ProjectsServiceCreateRequest) (*ProjectsServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectsServiceServer) Delete(context.Context, *ProjectsServiceDeleteRequest) (*ProjectsServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectsServiceServer) Update(context.Context, *ProjectsServiceUpdateRequest) (*ProjectsServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProjectsServiceServer) Get(context.Context, *ProjectsServiceGetRequest) (*ProjectsServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectsServiceServer) List(context.Context, *ProjectsServiceListRequest) (*ProjectsServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectsServiceServer) EnableStorage(context.Context, *ProjectsServiceEnableStorageRequest) (*ProjectsServiceEnableStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStorage not implemented")
}
func (UnimplementedProjectsServiceServer) DisableStorage(context.Context, *ProjectsServiceDisableStorageRequest) (*ProjectsServiceDisableStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStorage not implemented")
}
func (UnimplementedProjectsServiceServer) EnableUsers(context.Context, *ProjectsServiceEnableUsersRequest) (*ProjectsServiceEnableUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUsers not implemented")
}
func (UnimplementedProjectsServiceServer) DisableUsers(context.Context, *ProjectsServiceDisableUsersRequest) (*ProjectsServiceDisableUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUsers not implemented")
}
func (UnimplementedProjectsServiceServer) EnableMongo(context.Context, *ProjectsServiceEnableMongoRequest) (*ProjectsServiceEnableMongoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMongo not implemented")
}
func (UnimplementedProjectsServiceServer) DisableMongo(context.Context, *ProjectsServiceDisableMongoRequest) (*ProjectsServiceDisableMongoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMongo not implemented")
}
func (UnimplementedProjectsServiceServer) EnablePostgres(context.Context, *ProjectsServiceEnablePostgresRequest) (*ProjectsServiceEnablePostgresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePostgres not implemented")
}
func (UnimplementedProjectsServiceServer) DisablePostgres(context.Context, *ProjectsServiceDisablePostgresRequest) (*ProjectsServiceDisablePostgresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePostgres not implemented")
}
func (UnimplementedProjectsServiceServer) PublicKey(context.Context, *ProjectsServicePublicKeyRequest) (*ProjectsServicePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}

// UnsafeProjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServiceServer will
// result in compilation errors.
type UnsafeProjectsServiceServer interface {
	mustEmbedUnimplementedProjectsServiceServer()
}

func RegisterProjectsServiceServer(s grpc.ServiceRegistrar, srv ProjectsServiceServer) {
	s.RegisterService(&ProjectsService_ServiceDesc, srv)
}

func _ProjectsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).Ping(ctx, req.(*ProjectsServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).Create(ctx, req.(*ProjectsServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).Delete(ctx, req.(*ProjectsServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).Update(ctx, req.(*ProjectsServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).Get(ctx, req.(*ProjectsServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).List(ctx, req.(*ProjectsServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_EnableStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceEnableStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).EnableStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/EnableStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).EnableStorage(ctx, req.(*ProjectsServiceEnableStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_DisableStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceDisableStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).DisableStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/DisableStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).DisableStorage(ctx, req.(*ProjectsServiceDisableStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_EnableUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceEnableUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).EnableUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/EnableUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).EnableUsers(ctx, req.(*ProjectsServiceEnableUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_DisableUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceDisableUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).DisableUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/DisableUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).DisableUsers(ctx, req.(*ProjectsServiceDisableUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_EnableMongo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceEnableMongoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).EnableMongo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/EnableMongo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).EnableMongo(ctx, req.(*ProjectsServiceEnableMongoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_DisableMongo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceDisableMongoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).DisableMongo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/DisableMongo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).DisableMongo(ctx, req.(*ProjectsServiceDisableMongoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_EnablePostgres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceEnablePostgresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).EnablePostgres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/EnablePostgres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).EnablePostgres(ctx, req.(*ProjectsServiceEnablePostgresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_DisablePostgres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServiceDisablePostgresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).DisablePostgres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/DisablePostgres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).DisablePostgres(ctx, req.(*ProjectsServiceDisablePostgresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsServicePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.ProjectsService/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).PublicKey(ctx, req.(*ProjectsServicePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsService_ServiceDesc is the grpc.ServiceDesc for ProjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.ProjectsService",
	HandlerType: (*ProjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ProjectsService_Ping_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProjectsService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProjectsService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProjectsService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProjectsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProjectsService_List_Handler,
		},
		{
			MethodName: "EnableStorage",
			Handler:    _ProjectsService_EnableStorage_Handler,
		},
		{
			MethodName: "DisableStorage",
			Handler:    _ProjectsService_DisableStorage_Handler,
		},
		{
			MethodName: "EnableUsers",
			Handler:    _ProjectsService_EnableUsers_Handler,
		},
		{
			MethodName: "DisableUsers",
			Handler:    _ProjectsService_DisableUsers_Handler,
		},
		{
			MethodName: "EnableMongo",
			Handler:    _ProjectsService_EnableMongo_Handler,
		},
		{
			MethodName: "DisableMongo",
			Handler:    _ProjectsService_DisableMongo_Handler,
		},
		{
			MethodName: "EnablePostgres",
			Handler:    _ProjectsService_EnablePostgres_Handler,
		},
		{
			MethodName: "DisablePostgres",
			Handler:    _ProjectsService_DisablePostgres_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _ProjectsService_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_projects.proto",
}
