// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	// Ping checks if a service is live
	Ping(ctx context.Context, in *APIServicePingRequest, opts ...grpc.CallOption) (*APIServicePingResponse, error)
	// CreateAPIKey inserts a new API key in the database used to auth requests
	CreateAPIKey(ctx context.Context, in *APIServiceCreateAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceCreateAPIKeyResponse, error)
	// DeleteAllAPIKeys deletes all api keys in a namespace
	DeleteAllAPIKeys(ctx context.Context, in *APIServiceDeleteAllAPIKeysRequest, opts ...grpc.CallOption) (*APIServiceDeleteAllAPIKeysResponse, error)
	// DeleteAPIKey deletes an API key
	DeleteAPIKey(ctx context.Context, in *APIServiceDeleteAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceDeleteAPIKeyResponse, error)
	// UpdateAPIKey updates the access for an API key
	UpdateAPIKey(ctx context.Context, in *APIServiceUpdateAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceUpdateAPIKeyResponse, error)
	// GenerateAccessToken uses an API key to generate a short lived access token
	GenerateAccessToken(ctx context.Context, in *APIServiceGenerateAccessTokenRequest, opts ...grpc.CallOption) (*APIServiceGenerateAccessTokenResponse, error)
	// GetAPIKey returns the requested API key to the user
	GetAPIKey(ctx context.Context, in *APIServiceGetAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceGetAPIKeyResponse, error)
	// ListAPIKeys returns the requested API key to the user
	ListAPIKeys(ctx context.Context, in *APIServiceListAPIKeysRequest, opts ...grpc.CallOption) (*APIServiceListAPIKeysResponse, error)
	// ValidateAccessToken validates the requested acces token with the public key
	ValidateAccessToken(ctx context.Context, in *APIServiceValidateAccessTokenRequest, opts ...grpc.CallOption) (*APIServiceValidateAccessTokenResponse, error)
	// EnableMongoAccess configures the api key to work with the Mongo database
	EnableMongoAccess(ctx context.Context, in *APIServiceEnableMongoAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableMongoAccessResponse, error)
	// DisableMongoAccess remove access to the Mongo database for the api key
	DisableMongoAccess(ctx context.Context, in *APIServiceDisableMongoAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableMongoAccessResponse, error)
	// EnableMongoAccess configures the api key to work with the Mongo database
	EnablePostgresAccess(ctx context.Context, in *APIServiceEnablePostgresAccessRequest, opts ...grpc.CallOption) (*APIServiceEnablePostgresAccessResponse, error)
	// DisableMongoAccess remove access to the Mongo database for the api key
	DisablePostgresAccess(ctx context.Context, in *APIServiceDisablePostgresAccessRequest, opts ...grpc.CallOption) (*APIServiceDisablePostgresAccessResponse, error)
	// EnableStorageAccess configures the api key to work with the storage provider
	EnableStorageAccess(ctx context.Context, in *APIServiceEnableStorageAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableStorageAccessResponse, error)
	// DisableStorageAccess remove access to the storage provider for the api key
	DisableStorageAccess(ctx context.Context, in *APIServiceDisableStorageAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableStorageAccessResponse, error)
	// EnableUsersAccess configures the api key to work with Nuntio/Hera
	EnableUsersAccess(ctx context.Context, in *APIServiceEnableUsersAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableUsersAccessResponse, error)
	// DisableUsersAccess remove access to Nuntio/Hera for the api key
	DisableUsersAccess(ctx context.Context, in *APIServiceDisableUsersAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableUsersAccessResponse, error)
	// UpdateStatus updates the status of the api key
	UpdateStatus(ctx context.Context, in *APIServiceUpdateStatusRequest, opts ...grpc.CallOption) (*APIServiceUpdateStatusResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) Ping(ctx context.Context, in *APIServicePingRequest, opts ...grpc.CallOption) (*APIServicePingResponse, error) {
	out := new(APIServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateAPIKey(ctx context.Context, in *APIServiceCreateAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceCreateAPIKeyResponse, error) {
	out := new(APIServiceCreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteAllAPIKeys(ctx context.Context, in *APIServiceDeleteAllAPIKeysRequest, opts ...grpc.CallOption) (*APIServiceDeleteAllAPIKeysResponse, error) {
	out := new(APIServiceDeleteAllAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DeleteAllAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteAPIKey(ctx context.Context, in *APIServiceDeleteAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceDeleteAPIKeyResponse, error) {
	out := new(APIServiceDeleteAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateAPIKey(ctx context.Context, in *APIServiceUpdateAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceUpdateAPIKeyResponse, error) {
	out := new(APIServiceUpdateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GenerateAccessToken(ctx context.Context, in *APIServiceGenerateAccessTokenRequest, opts ...grpc.CallOption) (*APIServiceGenerateAccessTokenResponse, error) {
	out := new(APIServiceGenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/GenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAPIKey(ctx context.Context, in *APIServiceGetAPIKeyRequest, opts ...grpc.CallOption) (*APIServiceGetAPIKeyResponse, error) {
	out := new(APIServiceGetAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ListAPIKeys(ctx context.Context, in *APIServiceListAPIKeysRequest, opts ...grpc.CallOption) (*APIServiceListAPIKeysResponse, error) {
	out := new(APIServiceListAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ValidateAccessToken(ctx context.Context, in *APIServiceValidateAccessTokenRequest, opts ...grpc.CallOption) (*APIServiceValidateAccessTokenResponse, error) {
	out := new(APIServiceValidateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/ValidateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EnableMongoAccess(ctx context.Context, in *APIServiceEnableMongoAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableMongoAccessResponse, error) {
	out := new(APIServiceEnableMongoAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/EnableMongoAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DisableMongoAccess(ctx context.Context, in *APIServiceDisableMongoAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableMongoAccessResponse, error) {
	out := new(APIServiceDisableMongoAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DisableMongoAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EnablePostgresAccess(ctx context.Context, in *APIServiceEnablePostgresAccessRequest, opts ...grpc.CallOption) (*APIServiceEnablePostgresAccessResponse, error) {
	out := new(APIServiceEnablePostgresAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/EnablePostgresAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DisablePostgresAccess(ctx context.Context, in *APIServiceDisablePostgresAccessRequest, opts ...grpc.CallOption) (*APIServiceDisablePostgresAccessResponse, error) {
	out := new(APIServiceDisablePostgresAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DisablePostgresAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EnableStorageAccess(ctx context.Context, in *APIServiceEnableStorageAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableStorageAccessResponse, error) {
	out := new(APIServiceEnableStorageAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/EnableStorageAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DisableStorageAccess(ctx context.Context, in *APIServiceDisableStorageAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableStorageAccessResponse, error) {
	out := new(APIServiceDisableStorageAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DisableStorageAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) EnableUsersAccess(ctx context.Context, in *APIServiceEnableUsersAccessRequest, opts ...grpc.CallOption) (*APIServiceEnableUsersAccessResponse, error) {
	out := new(APIServiceEnableUsersAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/EnableUsersAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DisableUsersAccess(ctx context.Context, in *APIServiceDisableUsersAccessRequest, opts ...grpc.CallOption) (*APIServiceDisableUsersAccessResponse, error) {
	out := new(APIServiceDisableUsersAccessResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/DisableUsersAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateStatus(ctx context.Context, in *APIServiceUpdateStatusRequest, opts ...grpc.CallOption) (*APIServiceUpdateStatusResponse, error) {
	out := new(APIServiceUpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.APIService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations should embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	// Ping checks if a service is live
	Ping(context.Context, *APIServicePingRequest) (*APIServicePingResponse, error)
	// CreateAPIKey inserts a new API key in the database used to auth requests
	CreateAPIKey(context.Context, *APIServiceCreateAPIKeyRequest) (*APIServiceCreateAPIKeyResponse, error)
	// DeleteAllAPIKeys deletes all api keys in a namespace
	DeleteAllAPIKeys(context.Context, *APIServiceDeleteAllAPIKeysRequest) (*APIServiceDeleteAllAPIKeysResponse, error)
	// DeleteAPIKey deletes an API key
	DeleteAPIKey(context.Context, *APIServiceDeleteAPIKeyRequest) (*APIServiceDeleteAPIKeyResponse, error)
	// UpdateAPIKey updates the access for an API key
	UpdateAPIKey(context.Context, *APIServiceUpdateAPIKeyRequest) (*APIServiceUpdateAPIKeyResponse, error)
	// GenerateAccessToken uses an API key to generate a short lived access token
	GenerateAccessToken(context.Context, *APIServiceGenerateAccessTokenRequest) (*APIServiceGenerateAccessTokenResponse, error)
	// GetAPIKey returns the requested API key to the user
	GetAPIKey(context.Context, *APIServiceGetAPIKeyRequest) (*APIServiceGetAPIKeyResponse, error)
	// ListAPIKeys returns the requested API key to the user
	ListAPIKeys(context.Context, *APIServiceListAPIKeysRequest) (*APIServiceListAPIKeysResponse, error)
	// ValidateAccessToken validates the requested acces token with the public key
	ValidateAccessToken(context.Context, *APIServiceValidateAccessTokenRequest) (*APIServiceValidateAccessTokenResponse, error)
	// EnableMongoAccess configures the api key to work with the Mongo database
	EnableMongoAccess(context.Context, *APIServiceEnableMongoAccessRequest) (*APIServiceEnableMongoAccessResponse, error)
	// DisableMongoAccess remove access to the Mongo database for the api key
	DisableMongoAccess(context.Context, *APIServiceDisableMongoAccessRequest) (*APIServiceDisableMongoAccessResponse, error)
	// EnableMongoAccess configures the api key to work with the Mongo database
	EnablePostgresAccess(context.Context, *APIServiceEnablePostgresAccessRequest) (*APIServiceEnablePostgresAccessResponse, error)
	// DisableMongoAccess remove access to the Mongo database for the api key
	DisablePostgresAccess(context.Context, *APIServiceDisablePostgresAccessRequest) (*APIServiceDisablePostgresAccessResponse, error)
	// EnableStorageAccess configures the api key to work with the storage provider
	EnableStorageAccess(context.Context, *APIServiceEnableStorageAccessRequest) (*APIServiceEnableStorageAccessResponse, error)
	// DisableStorageAccess remove access to the storage provider for the api key
	DisableStorageAccess(context.Context, *APIServiceDisableStorageAccessRequest) (*APIServiceDisableStorageAccessResponse, error)
	// EnableUsersAccess configures the api key to work with Nuntio/Hera
	EnableUsersAccess(context.Context, *APIServiceEnableUsersAccessRequest) (*APIServiceEnableUsersAccessResponse, error)
	// DisableUsersAccess remove access to Nuntio/Hera for the api key
	DisableUsersAccess(context.Context, *APIServiceDisableUsersAccessRequest) (*APIServiceDisableUsersAccessResponse, error)
	// UpdateStatus updates the status of the api key
	UpdateStatus(context.Context, *APIServiceUpdateStatusRequest) (*APIServiceUpdateStatusResponse, error)
}

// UnimplementedAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) Ping(context.Context, *APIServicePingRequest) (*APIServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAPIServiceServer) CreateAPIKey(context.Context, *APIServiceCreateAPIKeyRequest) (*APIServiceCreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedAPIServiceServer) DeleteAllAPIKeys(context.Context, *APIServiceDeleteAllAPIKeysRequest) (*APIServiceDeleteAllAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllAPIKeys not implemented")
}
func (UnimplementedAPIServiceServer) DeleteAPIKey(context.Context, *APIServiceDeleteAPIKeyRequest) (*APIServiceDeleteAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedAPIServiceServer) UpdateAPIKey(context.Context, *APIServiceUpdateAPIKeyRequest) (*APIServiceUpdateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}
func (UnimplementedAPIServiceServer) GenerateAccessToken(context.Context, *APIServiceGenerateAccessTokenRequest) (*APIServiceGenerateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (UnimplementedAPIServiceServer) GetAPIKey(context.Context, *APIServiceGetAPIKeyRequest) (*APIServiceGetAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (UnimplementedAPIServiceServer) ListAPIKeys(context.Context, *APIServiceListAPIKeysRequest) (*APIServiceListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedAPIServiceServer) ValidateAccessToken(context.Context, *APIServiceValidateAccessTokenRequest) (*APIServiceValidateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessToken not implemented")
}
func (UnimplementedAPIServiceServer) EnableMongoAccess(context.Context, *APIServiceEnableMongoAccessRequest) (*APIServiceEnableMongoAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMongoAccess not implemented")
}
func (UnimplementedAPIServiceServer) DisableMongoAccess(context.Context, *APIServiceDisableMongoAccessRequest) (*APIServiceDisableMongoAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMongoAccess not implemented")
}
func (UnimplementedAPIServiceServer) EnablePostgresAccess(context.Context, *APIServiceEnablePostgresAccessRequest) (*APIServiceEnablePostgresAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePostgresAccess not implemented")
}
func (UnimplementedAPIServiceServer) DisablePostgresAccess(context.Context, *APIServiceDisablePostgresAccessRequest) (*APIServiceDisablePostgresAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePostgresAccess not implemented")
}
func (UnimplementedAPIServiceServer) EnableStorageAccess(context.Context, *APIServiceEnableStorageAccessRequest) (*APIServiceEnableStorageAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStorageAccess not implemented")
}
func (UnimplementedAPIServiceServer) DisableStorageAccess(context.Context, *APIServiceDisableStorageAccessRequest) (*APIServiceDisableStorageAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStorageAccess not implemented")
}
func (UnimplementedAPIServiceServer) EnableUsersAccess(context.Context, *APIServiceEnableUsersAccessRequest) (*APIServiceEnableUsersAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUsersAccess not implemented")
}
func (UnimplementedAPIServiceServer) DisableUsersAccess(context.Context, *APIServiceDisableUsersAccessRequest) (*APIServiceDisableUsersAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUsersAccess not implemented")
}
func (UnimplementedAPIServiceServer) UpdateStatus(context.Context, *APIServiceUpdateStatusRequest) (*APIServiceUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Ping(ctx, req.(*APIServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceCreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateAPIKey(ctx, req.(*APIServiceCreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteAllAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDeleteAllAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteAllAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DeleteAllAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteAllAPIKeys(ctx, req.(*APIServiceDeleteAllAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteAPIKey(ctx, req.(*APIServiceDeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceUpdateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateAPIKey(ctx, req.(*APIServiceUpdateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceGenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/GenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GenerateAccessToken(ctx, req.(*APIServiceGenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceGetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAPIKey(ctx, req.(*APIServiceGetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ListAPIKeys(ctx, req.(*APIServiceListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceValidateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/ValidateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ValidateAccessToken(ctx, req.(*APIServiceValidateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EnableMongoAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceEnableMongoAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EnableMongoAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/EnableMongoAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EnableMongoAccess(ctx, req.(*APIServiceEnableMongoAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DisableMongoAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDisableMongoAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DisableMongoAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DisableMongoAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DisableMongoAccess(ctx, req.(*APIServiceDisableMongoAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EnablePostgresAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceEnablePostgresAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EnablePostgresAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/EnablePostgresAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EnablePostgresAccess(ctx, req.(*APIServiceEnablePostgresAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DisablePostgresAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDisablePostgresAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DisablePostgresAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DisablePostgresAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DisablePostgresAccess(ctx, req.(*APIServiceDisablePostgresAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EnableStorageAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceEnableStorageAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EnableStorageAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/EnableStorageAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EnableStorageAccess(ctx, req.(*APIServiceEnableStorageAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DisableStorageAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDisableStorageAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DisableStorageAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DisableStorageAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DisableStorageAccess(ctx, req.(*APIServiceDisableStorageAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_EnableUsersAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceEnableUsersAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).EnableUsersAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/EnableUsersAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).EnableUsersAccess(ctx, req.(*APIServiceEnableUsersAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DisableUsersAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceDisableUsersAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DisableUsersAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/DisableUsersAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DisableUsersAccess(ctx, req.(*APIServiceDisableUsersAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIServiceUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.APIService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateStatus(ctx, req.(*APIServiceUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _APIService_Ping_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _APIService_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAllAPIKeys",
			Handler:    _APIService_DeleteAllAPIKeys_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _APIService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _APIService_UpdateAPIKey_Handler,
		},
		{
			MethodName: "GenerateAccessToken",
			Handler:    _APIService_GenerateAccessToken_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _APIService_GetAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _APIService_ListAPIKeys_Handler,
		},
		{
			MethodName: "ValidateAccessToken",
			Handler:    _APIService_ValidateAccessToken_Handler,
		},
		{
			MethodName: "EnableMongoAccess",
			Handler:    _APIService_EnableMongoAccess_Handler,
		},
		{
			MethodName: "DisableMongoAccess",
			Handler:    _APIService_DisableMongoAccess_Handler,
		},
		{
			MethodName: "EnablePostgresAccess",
			Handler:    _APIService_EnablePostgresAccess_Handler,
		},
		{
			MethodName: "DisablePostgresAccess",
			Handler:    _APIService_DisablePostgresAccess_Handler,
		},
		{
			MethodName: "EnableStorageAccess",
			Handler:    _APIService_EnableStorageAccess_Handler,
		},
		{
			MethodName: "DisableStorageAccess",
			Handler:    _APIService_DisableStorageAccess_Handler,
		},
		{
			MethodName: "EnableUsersAccess",
			Handler:    _APIService_EnableUsersAccess_Handler,
		},
		{
			MethodName: "DisableUsersAccess",
			Handler:    _APIService_DisableUsersAccess_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _APIService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_api.proto",
}
