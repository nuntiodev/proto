// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/projects/v1alpha1/projects_database.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoServiceClient is the client API for MongoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoServiceClient interface {
	// Ping checks if a service is live
	Ping(ctx context.Context, in *MongoServicePingRequest, opts ...grpc.CallOption) (*MongoServicePingResponse, error)
	// CreateNamespace initializes the storage interface for a given namespace
	CreateNamespace(ctx context.Context, in *MongoServiceCreateNamespaceRequest, opts ...grpc.CallOption) (*MongoServiceCreateNamespaceResponse, error)
	// DeleteNamespace removes the storage ressources for a given namespace
	DeleteNamespace(ctx context.Context, in *MongoServiceDeleteNamespaceRequest, opts ...grpc.CallOption) (*MongoServiceDeleteNamespaceResponse, error)
	// IsConfigured check if the storage interface is configured
	IsConfigured(ctx context.Context, in *MongoServiceIsConfiguredRequest, opts ...grpc.CallOption) (*MongoServiceIsConfiguredResponse, error)
	// AddUser adds a user to a bucket
	AddUser(ctx context.Context, in *MongoServiceAddUserRequest, opts ...grpc.CallOption) (*MongoServiceAddUserResponse, error)
	// Delete user removes a user from a bucket
	RemoveUser(ctx context.Context, in *MongoServiceRemoveUserRequest, opts ...grpc.CallOption) (*MongoServiceRemoveUserResponse, error)
}

type mongoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoServiceClient(cc grpc.ClientConnInterface) MongoServiceClient {
	return &mongoServiceClient{cc}
}

func (c *mongoServiceClient) Ping(ctx context.Context, in *MongoServicePingRequest, opts ...grpc.CallOption) (*MongoServicePingResponse, error) {
	out := new(MongoServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) CreateNamespace(ctx context.Context, in *MongoServiceCreateNamespaceRequest, opts ...grpc.CallOption) (*MongoServiceCreateNamespaceResponse, error) {
	out := new(MongoServiceCreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) DeleteNamespace(ctx context.Context, in *MongoServiceDeleteNamespaceRequest, opts ...grpc.CallOption) (*MongoServiceDeleteNamespaceResponse, error) {
	out := new(MongoServiceDeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) IsConfigured(ctx context.Context, in *MongoServiceIsConfiguredRequest, opts ...grpc.CallOption) (*MongoServiceIsConfiguredResponse, error) {
	out := new(MongoServiceIsConfiguredResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/IsConfigured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) AddUser(ctx context.Context, in *MongoServiceAddUserRequest, opts ...grpc.CallOption) (*MongoServiceAddUserResponse, error) {
	out := new(MongoServiceAddUserResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) RemoveUser(ctx context.Context, in *MongoServiceRemoveUserRequest, opts ...grpc.CallOption) (*MongoServiceRemoveUserResponse, error) {
	out := new(MongoServiceRemoveUserResponse)
	err := c.cc.Invoke(ctx, "/nuntio.projects.v1alpha1.MongoService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoServiceServer is the server API for MongoService service.
// All implementations should embed UnimplementedMongoServiceServer
// for forward compatibility
type MongoServiceServer interface {
	// Ping checks if a service is live
	Ping(context.Context, *MongoServicePingRequest) (*MongoServicePingResponse, error)
	// CreateNamespace initializes the storage interface for a given namespace
	CreateNamespace(context.Context, *MongoServiceCreateNamespaceRequest) (*MongoServiceCreateNamespaceResponse, error)
	// DeleteNamespace removes the storage ressources for a given namespace
	DeleteNamespace(context.Context, *MongoServiceDeleteNamespaceRequest) (*MongoServiceDeleteNamespaceResponse, error)
	// IsConfigured check if the storage interface is configured
	IsConfigured(context.Context, *MongoServiceIsConfiguredRequest) (*MongoServiceIsConfiguredResponse, error)
	// AddUser adds a user to a bucket
	AddUser(context.Context, *MongoServiceAddUserRequest) (*MongoServiceAddUserResponse, error)
	// Delete user removes a user from a bucket
	RemoveUser(context.Context, *MongoServiceRemoveUserRequest) (*MongoServiceRemoveUserResponse, error)
}

// UnimplementedMongoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMongoServiceServer struct {
}

func (UnimplementedMongoServiceServer) Ping(context.Context, *MongoServicePingRequest) (*MongoServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMongoServiceServer) CreateNamespace(context.Context, *MongoServiceCreateNamespaceRequest) (*MongoServiceCreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedMongoServiceServer) DeleteNamespace(context.Context, *MongoServiceDeleteNamespaceRequest) (*MongoServiceDeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedMongoServiceServer) IsConfigured(context.Context, *MongoServiceIsConfiguredRequest) (*MongoServiceIsConfiguredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConfigured not implemented")
}
func (UnimplementedMongoServiceServer) AddUser(context.Context, *MongoServiceAddUserRequest) (*MongoServiceAddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedMongoServiceServer) RemoveUser(context.Context, *MongoServiceRemoveUserRequest) (*MongoServiceRemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}

// UnsafeMongoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoServiceServer will
// result in compilation errors.
type UnsafeMongoServiceServer interface {
	mustEmbedUnimplementedMongoServiceServer()
}

func RegisterMongoServiceServer(s grpc.ServiceRegistrar, srv MongoServiceServer) {
	s.RegisterService(&MongoService_ServiceDesc, srv)
}

func _MongoService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).Ping(ctx, req.(*MongoServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServiceCreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).CreateNamespace(ctx, req.(*MongoServiceCreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServiceDeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).DeleteNamespace(ctx, req.(*MongoServiceDeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_IsConfigured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServiceIsConfiguredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).IsConfigured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/IsConfigured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).IsConfigured(ctx, req.(*MongoServiceIsConfiguredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServiceAddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).AddUser(ctx, req.(*MongoServiceAddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoServiceRemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.projects.v1alpha1.MongoService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).RemoveUser(ctx, req.(*MongoServiceRemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoService_ServiceDesc is the grpc.ServiceDesc for MongoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.projects.v1alpha1.MongoService",
	HandlerType: (*MongoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MongoService_Ping_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _MongoService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _MongoService_DeleteNamespace_Handler,
		},
		{
			MethodName: "IsConfigured",
			Handler:    _MongoService_IsConfigured_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _MongoService_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _MongoService_RemoveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio/projects/v1alpha1/projects_database.proto",
}
