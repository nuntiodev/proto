// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nuntio/users/v1alpha1/users_users.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Ping a server to check if it is live
	Ping(ctx context.Context, in *UsersServicePingRequest, opts ...grpc.CallOption) (*UsersServicePingResponse, error)
	// Create a new user
	Create(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*UsersServiceCreateResponse, error)
	// Update a users password
	UpdatePassword(ctx context.Context, in *UsersServiceUpdatePasswordRequest, opts ...grpc.CallOption) (*UsersServiceUpdatePasswordResponse, error)
	// Update a users profile
	UpdateProfile(ctx context.Context, in *UsersServiceUpdateProfileRequest, opts ...grpc.CallOption) (*UsersServiceUpdateProfileResponse, error)
	// Update a users contact info
	UpdateContactInfo(ctx context.Context, in *UsersServiceUpdateContactInfoRequest, opts ...grpc.CallOption) (*UsersServiceUpdateContactInfoResponse, error)
	// Uploads a new profile image with a client side stream
	UploadProfileImage(ctx context.Context, opts ...grpc.CallOption) (UsersService_UploadProfileImageClient, error)
	// Uploads a new profile image with a client side stream
	UploadCoverImage(ctx context.Context, opts ...grpc.CallOption) (UsersService_UploadCoverImageClient, error)
	// Fetches a users token info
	GetTokens(ctx context.Context, in *UsersServiceGetTokensRequest, opts ...grpc.CallOption) (*UsersServiceGetTokensResponse, error)
	// Searches for one or more users
	Search(ctx context.Context, in *UsersServiceSearchRequest, opts ...grpc.CallOption) (*UsersServiceSearchResponse, error)
	// Get a specific user
	Get(ctx context.Context, in *UsersServiceGetRequest, opts ...grpc.CallOption) (*UsersServiceGetResponse, error)
	// Get multiple specific users
	GetMany(ctx context.Context, in *UsersServiceGetManyRequest, opts ...grpc.CallOption) (*UsersServiceGetManyResponse, error)
	// List users
	List(ctx context.Context, in *UsersServiceListRequest, opts ...grpc.CallOption) (*UsersServiceListResponse, error)
	// Add a contact to a user
	AddContact(ctx context.Context, in *UsersServiceAddContactRequest, opts ...grpc.CallOption) (*UsersServiceAddContactResponse, error)
	// Remove a contact form a user
	RemoveContact(ctx context.Context, in *UsersServiceRemoveContactRequest, opts ...grpc.CallOption) (*UsersServiceRemoveContactResponse, error)
	// Accept a contact request from a user
	AcceptContact(ctx context.Context, in *UsersServiceAcceptContactRequest, opts ...grpc.CallOption) (*UsersServiceAcceptContactResponse, error)
	// Get a users contacts
	GetContacts(ctx context.Context, in *UsersServiceGetContactsRequest, opts ...grpc.CallOption) (*UsersServiceGetContactsResponse, error)
	// Delete a specific user
	Delete(ctx context.Context, in *UsersServiceDeleteRequest, opts ...grpc.CallOption) (*UsersServiceDeleteResponse, error)
	// Delete many specific users
	DeleteMany(ctx context.Context, in *UsersServiceDeleteManyRequest, opts ...grpc.CallOption) (*UsersServiceDeleteManyResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) Ping(ctx context.Context, in *UsersServicePingRequest, opts ...grpc.CallOption) (*UsersServicePingResponse, error) {
	out := new(UsersServicePingResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Create(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*UsersServiceCreateResponse, error) {
	out := new(UsersServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdatePassword(ctx context.Context, in *UsersServiceUpdatePasswordRequest, opts ...grpc.CallOption) (*UsersServiceUpdatePasswordResponse, error) {
	out := new(UsersServiceUpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateProfile(ctx context.Context, in *UsersServiceUpdateProfileRequest, opts ...grpc.CallOption) (*UsersServiceUpdateProfileResponse, error) {
	out := new(UsersServiceUpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateContactInfo(ctx context.Context, in *UsersServiceUpdateContactInfoRequest, opts ...grpc.CallOption) (*UsersServiceUpdateContactInfoResponse, error) {
	out := new(UsersServiceUpdateContactInfoResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/UpdateContactInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UploadProfileImage(ctx context.Context, opts ...grpc.CallOption) (UsersService_UploadProfileImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], "/nuntio.users.v1alpha1.UsersService/UploadProfileImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceUploadProfileImageClient{stream}
	return x, nil
}

type UsersService_UploadProfileImageClient interface {
	Send(*UsersServiceUploadProfileImageRequest) error
	CloseAndRecv() (*UsersServiceUploadProfileImageResponse, error)
	grpc.ClientStream
}

type usersServiceUploadProfileImageClient struct {
	grpc.ClientStream
}

func (x *usersServiceUploadProfileImageClient) Send(m *UsersServiceUploadProfileImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceUploadProfileImageClient) CloseAndRecv() (*UsersServiceUploadProfileImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UsersServiceUploadProfileImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) UploadCoverImage(ctx context.Context, opts ...grpc.CallOption) (UsersService_UploadCoverImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[1], "/nuntio.users.v1alpha1.UsersService/UploadCoverImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceUploadCoverImageClient{stream}
	return x, nil
}

type UsersService_UploadCoverImageClient interface {
	Send(*UsersServiceUploadCoverImageRequest) error
	CloseAndRecv() (*UsersServiceUploadCoverImageResponse, error)
	grpc.ClientStream
}

type usersServiceUploadCoverImageClient struct {
	grpc.ClientStream
}

func (x *usersServiceUploadCoverImageClient) Send(m *UsersServiceUploadCoverImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceUploadCoverImageClient) CloseAndRecv() (*UsersServiceUploadCoverImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UsersServiceUploadCoverImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) GetTokens(ctx context.Context, in *UsersServiceGetTokensRequest, opts ...grpc.CallOption) (*UsersServiceGetTokensResponse, error) {
	out := new(UsersServiceGetTokensResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Search(ctx context.Context, in *UsersServiceSearchRequest, opts ...grpc.CallOption) (*UsersServiceSearchResponse, error) {
	out := new(UsersServiceSearchResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Get(ctx context.Context, in *UsersServiceGetRequest, opts ...grpc.CallOption) (*UsersServiceGetResponse, error) {
	out := new(UsersServiceGetResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetMany(ctx context.Context, in *UsersServiceGetManyRequest, opts ...grpc.CallOption) (*UsersServiceGetManyResponse, error) {
	out := new(UsersServiceGetManyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) List(ctx context.Context, in *UsersServiceListRequest, opts ...grpc.CallOption) (*UsersServiceListResponse, error) {
	out := new(UsersServiceListResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddContact(ctx context.Context, in *UsersServiceAddContactRequest, opts ...grpc.CallOption) (*UsersServiceAddContactResponse, error) {
	out := new(UsersServiceAddContactResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/AddContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RemoveContact(ctx context.Context, in *UsersServiceRemoveContactRequest, opts ...grpc.CallOption) (*UsersServiceRemoveContactResponse, error) {
	out := new(UsersServiceRemoveContactResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/RemoveContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AcceptContact(ctx context.Context, in *UsersServiceAcceptContactRequest, opts ...grpc.CallOption) (*UsersServiceAcceptContactResponse, error) {
	out := new(UsersServiceAcceptContactResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/AcceptContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetContacts(ctx context.Context, in *UsersServiceGetContactsRequest, opts ...grpc.CallOption) (*UsersServiceGetContactsResponse, error) {
	out := new(UsersServiceGetContactsResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/GetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Delete(ctx context.Context, in *UsersServiceDeleteRequest, opts ...grpc.CallOption) (*UsersServiceDeleteResponse, error) {
	out := new(UsersServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteMany(ctx context.Context, in *UsersServiceDeleteManyRequest, opts ...grpc.CallOption) (*UsersServiceDeleteManyResponse, error) {
	out := new(UsersServiceDeleteManyResponse)
	err := c.cc.Invoke(ctx, "/nuntio.users.v1alpha1.UsersService/DeleteMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations should embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	// Ping a server to check if it is live
	Ping(context.Context, *UsersServicePingRequest) (*UsersServicePingResponse, error)
	// Create a new user
	Create(context.Context, *UsersServiceCreateRequest) (*UsersServiceCreateResponse, error)
	// Update a users password
	UpdatePassword(context.Context, *UsersServiceUpdatePasswordRequest) (*UsersServiceUpdatePasswordResponse, error)
	// Update a users profile
	UpdateProfile(context.Context, *UsersServiceUpdateProfileRequest) (*UsersServiceUpdateProfileResponse, error)
	// Update a users contact info
	UpdateContactInfo(context.Context, *UsersServiceUpdateContactInfoRequest) (*UsersServiceUpdateContactInfoResponse, error)
	// Uploads a new profile image with a client side stream
	UploadProfileImage(UsersService_UploadProfileImageServer) error
	// Uploads a new profile image with a client side stream
	UploadCoverImage(UsersService_UploadCoverImageServer) error
	// Fetches a users token info
	GetTokens(context.Context, *UsersServiceGetTokensRequest) (*UsersServiceGetTokensResponse, error)
	// Searches for one or more users
	Search(context.Context, *UsersServiceSearchRequest) (*UsersServiceSearchResponse, error)
	// Get a specific user
	Get(context.Context, *UsersServiceGetRequest) (*UsersServiceGetResponse, error)
	// Get multiple specific users
	GetMany(context.Context, *UsersServiceGetManyRequest) (*UsersServiceGetManyResponse, error)
	// List users
	List(context.Context, *UsersServiceListRequest) (*UsersServiceListResponse, error)
	// Add a contact to a user
	AddContact(context.Context, *UsersServiceAddContactRequest) (*UsersServiceAddContactResponse, error)
	// Remove a contact form a user
	RemoveContact(context.Context, *UsersServiceRemoveContactRequest) (*UsersServiceRemoveContactResponse, error)
	// Accept a contact request from a user
	AcceptContact(context.Context, *UsersServiceAcceptContactRequest) (*UsersServiceAcceptContactResponse, error)
	// Get a users contacts
	GetContacts(context.Context, *UsersServiceGetContactsRequest) (*UsersServiceGetContactsResponse, error)
	// Delete a specific user
	Delete(context.Context, *UsersServiceDeleteRequest) (*UsersServiceDeleteResponse, error)
	// Delete many specific users
	DeleteMany(context.Context, *UsersServiceDeleteManyRequest) (*UsersServiceDeleteManyResponse, error)
}

// UnimplementedUsersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) Ping(context.Context, *UsersServicePingRequest) (*UsersServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUsersServiceServer) Create(context.Context, *UsersServiceCreateRequest) (*UsersServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUsersServiceServer) UpdatePassword(context.Context, *UsersServiceUpdatePasswordRequest) (*UsersServiceUpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUsersServiceServer) UpdateProfile(context.Context, *UsersServiceUpdateProfileRequest) (*UsersServiceUpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUsersServiceServer) UpdateContactInfo(context.Context, *UsersServiceUpdateContactInfoRequest) (*UsersServiceUpdateContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactInfo not implemented")
}
func (UnimplementedUsersServiceServer) UploadProfileImage(UsersService_UploadProfileImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadProfileImage not implemented")
}
func (UnimplementedUsersServiceServer) UploadCoverImage(UsersService_UploadCoverImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadCoverImage not implemented")
}
func (UnimplementedUsersServiceServer) GetTokens(context.Context, *UsersServiceGetTokensRequest) (*UsersServiceGetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedUsersServiceServer) Search(context.Context, *UsersServiceSearchRequest) (*UsersServiceSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUsersServiceServer) Get(context.Context, *UsersServiceGetRequest) (*UsersServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersServiceServer) GetMany(context.Context, *UsersServiceGetManyRequest) (*UsersServiceGetManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedUsersServiceServer) List(context.Context, *UsersServiceListRequest) (*UsersServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUsersServiceServer) AddContact(context.Context, *UsersServiceAddContactRequest) (*UsersServiceAddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedUsersServiceServer) RemoveContact(context.Context, *UsersServiceRemoveContactRequest) (*UsersServiceRemoveContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContact not implemented")
}
func (UnimplementedUsersServiceServer) AcceptContact(context.Context, *UsersServiceAcceptContactRequest) (*UsersServiceAcceptContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptContact not implemented")
}
func (UnimplementedUsersServiceServer) GetContacts(context.Context, *UsersServiceGetContactsRequest) (*UsersServiceGetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedUsersServiceServer) Delete(context.Context, *UsersServiceDeleteRequest) (*UsersServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsersServiceServer) DeleteMany(context.Context, *UsersServiceDeleteManyRequest) (*UsersServiceDeleteManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Ping(ctx, req.(*UsersServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Create(ctx, req.(*UsersServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceUpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdatePassword(ctx, req.(*UsersServiceUpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceUpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateProfile(ctx, req.(*UsersServiceUpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceUpdateContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/UpdateContactInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateContactInfo(ctx, req.(*UsersServiceUpdateContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UploadProfileImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).UploadProfileImage(&usersServiceUploadProfileImageServer{stream})
}

type UsersService_UploadProfileImageServer interface {
	SendAndClose(*UsersServiceUploadProfileImageResponse) error
	Recv() (*UsersServiceUploadProfileImageRequest, error)
	grpc.ServerStream
}

type usersServiceUploadProfileImageServer struct {
	grpc.ServerStream
}

func (x *usersServiceUploadProfileImageServer) SendAndClose(m *UsersServiceUploadProfileImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceUploadProfileImageServer) Recv() (*UsersServiceUploadProfileImageRequest, error) {
	m := new(UsersServiceUploadProfileImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UsersService_UploadCoverImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).UploadCoverImage(&usersServiceUploadCoverImageServer{stream})
}

type UsersService_UploadCoverImageServer interface {
	SendAndClose(*UsersServiceUploadCoverImageResponse) error
	Recv() (*UsersServiceUploadCoverImageRequest, error)
	grpc.ServerStream
}

type usersServiceUploadCoverImageServer struct {
	grpc.ServerStream
}

func (x *usersServiceUploadCoverImageServer) SendAndClose(m *UsersServiceUploadCoverImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceUploadCoverImageServer) Recv() (*UsersServiceUploadCoverImageRequest, error) {
	m := new(UsersServiceUploadCoverImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UsersService_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceGetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTokens(ctx, req.(*UsersServiceGetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Search(ctx, req.(*UsersServiceSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Get(ctx, req.(*UsersServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceGetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetMany(ctx, req.(*UsersServiceGetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).List(ctx, req.(*UsersServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/AddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddContact(ctx, req.(*UsersServiceAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RemoveContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceRemoveContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RemoveContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/RemoveContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RemoveContact(ctx, req.(*UsersServiceRemoveContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceAcceptContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/AcceptContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AcceptContact(ctx, req.(*UsersServiceAcceptContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceGetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetContacts(ctx, req.(*UsersServiceGetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Delete(ctx, req.(*UsersServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersServiceDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nuntio.users.v1alpha1.UsersService/DeleteMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteMany(ctx, req.(*UsersServiceDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuntio.users.v1alpha1.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UsersService_Ping_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UsersService_Create_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UsersService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UsersService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdateContactInfo",
			Handler:    _UsersService_UpdateContactInfo_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _UsersService_GetTokens_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _UsersService_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UsersService_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _UsersService_GetMany_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UsersService_List_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _UsersService_AddContact_Handler,
		},
		{
			MethodName: "RemoveContact",
			Handler:    _UsersService_RemoveContact_Handler,
		},
		{
			MethodName: "AcceptContact",
			Handler:    _UsersService_AcceptContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _UsersService_GetContacts_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UsersService_Delete_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _UsersService_DeleteMany_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProfileImage",
			Handler:       _UsersService_UploadProfileImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadCoverImage",
			Handler:       _UsersService_UploadCoverImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nuntio/users/v1alpha1/users_users.proto",
}
